"use strict";(self.webpackChunk_mapcomponents_react_maplibre=self.webpackChunk_mapcomponents_react_maplibre||[]).push([[7211],{"./src/components/MlGpxViewer/MlGpxViewer.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{ExampleConfig:()=>ExampleConfig,__namedExportsOrder:()=>__namedExportsOrder,default:()=>__WEBPACK_DEFAULT_EXPORT__});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js"),_MlGpxViewer__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./src/components/MlGpxViewer/MlGpxViewer.tsx"),_decorators_MapContextDecorator__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./src/decorators/MapContextDecorator.tsx"),_util_MlGpxViewerInstructions__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./src/components/MlGpxViewer/util/MlGpxViewerInstructions.tsx"),_ui_components_TopToolbar__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("./src/ui_components/TopToolbar.tsx"),_mui_material__WEBPACK_IMPORTED_MODULE_10__=__webpack_require__("./node_modules/@mui/material/Button/Button.js"),_util_MlGpxDemoLoader__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__("./src/components/MlGpxViewer/util/MlGpxDemoLoader.tsx"),_ui_components_Dropzone__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__("./src/ui_components/Dropzone.tsx"),_ui_components_UploadButton__WEBPACK_IMPORTED_MODULE_7__=__webpack_require__("./src/ui_components/UploadButton.tsx"),_util_Metadata__WEBPACK_IMPORTED_MODULE_8__=__webpack_require__("./src/components/MlGpxViewer/util/Metadata.tsx"),_ui_components_Sidebar__WEBPACK_IMPORTED_MODULE_9__=__webpack_require__("./src/ui_components/Sidebar.tsx");function _slicedToArray(arr,i){return function _arrayWithHoles(arr){if(Array.isArray(arr))return arr}(arr)||function _iterableToArrayLimit(r,l){var t=null==r?null:"undefined"!=typeof Symbol&&r[Symbol.iterator]||r["@@iterator"];if(null!=t){var e,n,i,u,a=[],f=!0,o=!1;try{if(i=(t=t.call(r)).next,0===l){if(Object(t)!==t)return;f=!1}else for(;!(f=(e=i.call(t)).done)&&(a.push(e.value),a.length!==l);f=!0);}catch(r){o=!0,n=r}finally{try{if(!f&&null!=t.return&&(u=t.return(),Object(u)!==u))return}finally{if(o)throw n}}return a}}(arr,i)||function _unsupportedIterableToArray(o,minLen){if(!o)return;if("string"==typeof o)return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);"Object"===n&&o.constructor&&(n=o.constructor.name);if("Map"===n||"Set"===n)return Array.from(o);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return _arrayLikeToArray(o,minLen)}(arr,i)||function _nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function _arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}const __WEBPACK_DEFAULT_EXPORT__={title:"MapComponents/MlGpxViewer",component:_MlGpxViewer__WEBPACK_IMPORTED_MODULE_1__.A,argTypes:{options:{control:{type:"object"}}},decorators:_decorators_MapContextDecorator__WEBPACK_IMPORTED_MODULE_2__.A};var buttonStyle={marginRight:{xs:"0px",sm:"10px"},width:"140px"},ExampleConfig=function Template(){var _useState2=_slicedToArray((0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(),2),gpxData=_useState2[0],setGpxData=_useState2[1],_useState4=_slicedToArray((0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(!1),2),demoLoaderOpen=_useState4[0],setDemoLoaderOpen=_useState4[1],_useState6=_slicedToArray((0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(!1),2),guide=_useState6[0],setGuide=_useState6[1],_useState8=_slicedToArray((0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([]),2),metadata=_useState8[0],setMetadata=_useState8[1],_useState10=_slicedToArray((0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(!1),2),openSidebar=_useState10[0],setOpenSidebar=_useState10[1];return(0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)((function(){0===metadata.length?setOpenSidebar(!1):setOpenSidebar(!0)}),[metadata]),react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment,null,react__WEBPACK_IMPORTED_MODULE_0__.createElement(_util_MlGpxViewerInstructions__WEBPACK_IMPORTED_MODULE_3__.A,{open:guide}),react__WEBPACK_IMPORTED_MODULE_0__.createElement(_util_MlGpxDemoLoader__WEBPACK_IMPORTED_MODULE_5__.A,{open:demoLoaderOpen,close:function close(){return setDemoLoaderOpen(!1)},setGpx:setGpxData}),react__WEBPACK_IMPORTED_MODULE_0__.createElement(_ui_components_TopToolbar__WEBPACK_IMPORTED_MODULE_4__.A,{buttons:react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment,null,react__WEBPACK_IMPORTED_MODULE_0__.createElement(_mui_material__WEBPACK_IMPORTED_MODULE_10__.A,{variant:openSidebar?"contained":"outlined",onClick:function onClick(){return setOpenSidebar(!openSidebar)},sx:buttonStyle},"Informations"),react__WEBPACK_IMPORTED_MODULE_0__.createElement("br",null),react__WEBPACK_IMPORTED_MODULE_0__.createElement("br",null),react__WEBPACK_IMPORTED_MODULE_0__.createElement(_ui_components_UploadButton__WEBPACK_IMPORTED_MODULE_7__.A,{setData:setGpxData,buttonComponent:react__WEBPACK_IMPORTED_MODULE_0__.createElement(_mui_material__WEBPACK_IMPORTED_MODULE_10__.A,{variant:"contained",sx:buttonStyle},"Upload"),accept:".gpx"}),react__WEBPACK_IMPORTED_MODULE_0__.createElement("br",null),react__WEBPACK_IMPORTED_MODULE_0__.createElement("br",null),react__WEBPACK_IMPORTED_MODULE_0__.createElement(_mui_material__WEBPACK_IMPORTED_MODULE_10__.A,{variant:demoLoaderOpen?"contained":"outlined",onClick:function demoLoader(){setDemoLoaderOpen(!demoLoaderOpen)},sx:buttonStyle},"Demo Mode"),react__WEBPACK_IMPORTED_MODULE_0__.createElement("br",null),react__WEBPACK_IMPORTED_MODULE_0__.createElement("br",null),react__WEBPACK_IMPORTED_MODULE_0__.createElement(_mui_material__WEBPACK_IMPORTED_MODULE_10__.A,{variant:"contained",onClick:function handleClick2(){setGuide(!0),setTimeout((function(){setGuide(!1)}),9e3)},sx:{display:"none"}},"Guide me through"))}),react__WEBPACK_IMPORTED_MODULE_0__.createElement(_ui_components_Sidebar__WEBPACK_IMPORTED_MODULE_9__.A,{open:openSidebar,setOpen:setOpenSidebar,name:"GPX Informations"},react__WEBPACK_IMPORTED_MODULE_0__.createElement(_util_Metadata__WEBPACK_IMPORTED_MODULE_8__.A,{metadata})),react__WEBPACK_IMPORTED_MODULE_0__.createElement(_ui_components_Dropzone__WEBPACK_IMPORTED_MODULE_6__.A,{setData:function setData(data){return setGpxData(data)}}),react__WEBPACK_IMPORTED_MODULE_0__.createElement(_MlGpxViewer__WEBPACK_IMPORTED_MODULE_1__.A,{gpxData,onParseGpxData:function onParseGpxData(parsedGpx){return setMetadata(parsedGpx.metadata?parsedGpx.metadata:[])}}))}.bind({});ExampleConfig.parameters={};const __namedExportsOrder=["ExampleConfig"];ExampleConfig.parameters={...ExampleConfig.parameters,docs:{...ExampleConfig.parameters?.docs,source:{originalSource:"() => {\n  const [gpxData, setGpxData] = useState<string | ArrayBuffer | undefined>();\n  const [demoLoaderOpen, setDemoLoaderOpen] = useState(false);\n  const [guide, setGuide] = useState(false);\n  const [metadata, setMetadata] = useState<MetadataType[]>([]);\n  const [openSidebar, setOpenSidebar] = useState(false);\n  const demoLoader = () => {\n    setDemoLoaderOpen(!demoLoaderOpen);\n  };\n  const handleClick2 = () => {\n    setGuide(true);\n    setTimeout(() => {\n      setGuide(false);\n    }, 9000);\n  };\n  useEffect(() => {\n    if (metadata.length === 0) {\n      setOpenSidebar(false);\n    } else {\n      setOpenSidebar(true);\n    }\n  }, [metadata]);\n  return <>\n            <MlGpxViewerInstructions open={guide} />\n            <MlGpxDemoLoader open={demoLoaderOpen} close={() => setDemoLoaderOpen(false)} setGpx={setGpxData} />\n            <TopToolbar buttons={<>\n                        <Button variant={openSidebar ? 'contained' : 'outlined'} onClick={() => setOpenSidebar(!openSidebar)} sx={buttonStyle}>\n                            Informations\n                        </Button>\n                        <br />\n                        <br />\n                        <UploadButton setData={setGpxData} buttonComponent={<Button variant=\"contained\" sx={buttonStyle}>\n                                    Upload\n                                </Button>} accept=\".gpx\" />\n                        <br />\n                        <br />\n                        <Button variant={demoLoaderOpen ? 'contained' : 'outlined'} onClick={demoLoader} sx={buttonStyle}>\n                            Demo Mode\n                        </Button>\n                        <br />\n                        <br />\n                        <Button variant=\"contained\" onClick={handleClick2} sx={{\n        display: 'none'\n      }}>\n                            Guide me through\n                        </Button>\n                    </>} />\n            <Sidebar open={openSidebar} setOpen={setOpenSidebar} name={'GPX Informations'}>\n                <Metadata metadata={metadata} />\n            </Sidebar>\n            <Dropzone setData={data => setGpxData(data)} />\n            <MlGpxViewer gpxData={gpxData as string | undefined} onParseGpxData={parsedGpx => setMetadata(parsedGpx.metadata ? parsedGpx.metadata : [])} />\n        </>;\n}",...ExampleConfig.parameters?.docs?.source}}}}}]);