/*! For license information please see hooks-useAddProtocol-useAddProtocol-stories.853db744.iframe.bundle.js.LICENSE.txt */
(self.webpackChunk_mapcomponents_react_maplibre=self.webpackChunk_mapcomponents_react_maplibre||[]).push([[843],{"./src/decorators/EmptyMapDecorator.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{A:()=>__WEBPACK_DEFAULT_EXPORT__});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js"),_index__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./src/index.ts"),_components_MapLibreMap_MapLibreMap__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./src/components/MapLibreMap/MapLibreMap.tsx"),_components_MlNavigationTools_MlNavigationTools__WEBPACK_IMPORTED_MODULE_4__=(__webpack_require__("./src/decorators/style.css"),__webpack_require__("./src/components/MlNavigationTools/MlNavigationTools.tsx")),_mui_material_styles__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__("./node_modules/@mui/material/esm/styles/ThemeProvider.js"),_ui_components_MapcomponentsTheme__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__("./src/ui_components/MapcomponentsTheme.tsx");const __WEBPACK_DEFAULT_EXPORT__=[function(Story,context){var _context$globals2,theme=(0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)((function(){var _context$globals;return(0,_ui_components_MapcomponentsTheme__WEBPACK_IMPORTED_MODULE_5__.A)(null==context||null===(_context$globals=context.globals)||void 0===_context$globals?void 0:_context$globals.theme)}),[null==context||null===(_context$globals2=context.globals)||void 0===_context$globals2?void 0:_context$globals2.theme]);return react__WEBPACK_IMPORTED_MODULE_0__.createElement("div",{className:"fullscreen_map"},react__WEBPACK_IMPORTED_MODULE_0__.createElement(_index__WEBPACK_IMPORTED_MODULE_1__.mO,null,react__WEBPACK_IMPORTED_MODULE_0__.createElement(_mui_material_styles__WEBPACK_IMPORTED_MODULE_6__.A,{theme},react__WEBPACK_IMPORTED_MODULE_0__.createElement(Story,null),react__WEBPACK_IMPORTED_MODULE_0__.createElement(_components_MapLibreMap_MapLibreMap__WEBPACK_IMPORTED_MODULE_2__.A,{mapId:"map_1",options:{zoom:12.5,center:[7.0851268,50.73884]}}),react__WEBPACK_IMPORTED_MODULE_0__.createElement(_components_MlNavigationTools_MlNavigationTools__WEBPACK_IMPORTED_MODULE_4__.A,{showZoomButtons:!1,mapId:"map_1"}))))}]},"./src/hooks/useAddProtocol/useAddProtocol.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{CSVOrTSV:()=>CSVOrTSV,CSVWithOptions:()=>CSVWithOptions,CatalogueDemo:()=>CatalogueDemo,GPX:()=>GPX,KML:()=>KML,MbTiles:()=>MbTiles,OSM:()=>OSM,TCX:()=>TCX,Topojson:()=>Topojson,__namedExportsOrder:()=>__namedExportsOrder,default:()=>useAddProtocol_stories});var react=__webpack_require__("./node_modules/react/index.js"),Button=__webpack_require__("./node_modules/@mui/material/esm/Button/Button.js"),Menu=__webpack_require__("./node_modules/@mui/material/esm/Menu/Menu.js"),MenuItem=__webpack_require__("./node_modules/@mui/material/esm/MenuItem/MenuItem.js"),Tooltip=__webpack_require__("./node_modules/@mui/material/esm/Tooltip/Tooltip.js"),Box=__webpack_require__("./node_modules/@mui/material/esm/Box/Box.js"),Typography=__webpack_require__("./node_modules/@mui/material/esm/Typography/Typography.js"),sql_wasm=__webpack_require__("./node_modules/sql.js/dist/sql-wasm.js"),sql_wasm_default=__webpack_require__.n(sql_wasm),pako_esm=__webpack_require__("./node_modules/pako/dist/pako.esm.mjs");function _typeof(o){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(o){return typeof o}:function(o){return o&&"function"==typeof Symbol&&o.constructor===Symbol&&o!==Symbol.prototype?"symbol":typeof o},_typeof(o)}function _regeneratorRuntime(){_regeneratorRuntime=function _regeneratorRuntime(){return r};var t,r={},e=Object.prototype,n=e.hasOwnProperty,o="function"==typeof Symbol?Symbol:{},i=o.iterator||"@@iterator",a=o.asyncIterator||"@@asyncIterator",u=o.toStringTag||"@@toStringTag";function c(t,r,e,n){return Object.defineProperty(t,r,{value:e,enumerable:!n,configurable:!n,writable:!n})}try{c({},"")}catch(t){c=function c(t,r,e){return t[r]=e}}function h(r,e,n,o){var i=e&&e.prototype instanceof Generator?e:Generator,a=Object.create(i.prototype);return c(a,"_invoke",function(r,e,n){var o=1;return function(i,a){if(3===o)throw Error("Generator is already running");if(4===o){if("throw"===i)throw a;return{value:t,done:!0}}for(n.method=i,n.arg=a;;){var u=n.delegate;if(u){var c=d(u,n);if(c){if(c===f)continue;return c}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(1===o)throw o=4,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);o=3;var h=s(r,e,n);if("normal"===h.type){if(o=n.done?4:2,h.arg===f)continue;return{value:h.arg,done:n.done}}"throw"===h.type&&(o=4,n.method="throw",n.arg=h.arg)}}}(r,n,new Context(o||[])),!0),a}function s(t,r,e){try{return{type:"normal",arg:t.call(r,e)}}catch(t){return{type:"throw",arg:t}}}r.wrap=h;var f={};function Generator(){}function GeneratorFunction(){}function GeneratorFunctionPrototype(){}var l={};c(l,i,(function(){return this}));var p=Object.getPrototypeOf,y=p&&p(p(x([])));y&&y!==e&&n.call(y,i)&&(l=y);var v=GeneratorFunctionPrototype.prototype=Generator.prototype=Object.create(l);function g(t){["next","throw","return"].forEach((function(r){c(t,r,(function(t){return this._invoke(r,t)}))}))}function AsyncIterator(t,r){function e(o,i,a,u){var c=s(t[o],t,i);if("throw"!==c.type){var h=c.arg,f=h.value;return f&&"object"==_typeof(f)&&n.call(f,"__await")?r.resolve(f.__await).then((function(t){e("next",t,a,u)}),(function(t){e("throw",t,a,u)})):r.resolve(f).then((function(t){h.value=t,a(h)}),(function(t){return e("throw",t,a,u)}))}u(c.arg)}var o;c(this,"_invoke",(function(t,n){function i(){return new r((function(r,o){e(t,n,r,o)}))}return o=o?o.then(i,i):i()}),!0)}function d(r,e){var n=e.method,o=r.i[n];if(o===t)return e.delegate=null,"throw"===n&&r.i.return&&(e.method="return",e.arg=t,d(r,e),"throw"===e.method)||"return"!==n&&(e.method="throw",e.arg=new TypeError("The iterator does not provide a '"+n+"' method")),f;var i=s(o,r.i,e.arg);if("throw"===i.type)return e.method="throw",e.arg=i.arg,e.delegate=null,f;var a=i.arg;return a?a.done?(e[r.r]=a.value,e.next=r.n,"return"!==e.method&&(e.method="next",e.arg=t),e.delegate=null,f):a:(e.method="throw",e.arg=new TypeError("iterator result is not an object"),e.delegate=null,f)}function w(t){this.tryEntries.push(t)}function m(r){var e=r[4]||{};e.type="normal",e.arg=t,r[4]=e}function Context(t){this.tryEntries=[[-1]],t.forEach(w,this),this.reset(!0)}function x(r){if(null!=r){var e=r[i];if(e)return e.call(r);if("function"==typeof r.next)return r;if(!isNaN(r.length)){var o=-1,a=function e(){for(;++o<r.length;)if(n.call(r,o))return e.value=r[o],e.done=!1,e;return e.value=t,e.done=!0,e};return a.next=a}}throw new TypeError(_typeof(r)+" is not iterable")}return GeneratorFunction.prototype=GeneratorFunctionPrototype,c(v,"constructor",GeneratorFunctionPrototype),c(GeneratorFunctionPrototype,"constructor",GeneratorFunction),GeneratorFunction.displayName=c(GeneratorFunctionPrototype,u,"GeneratorFunction"),r.isGeneratorFunction=function(t){var r="function"==typeof t&&t.constructor;return!!r&&(r===GeneratorFunction||"GeneratorFunction"===(r.displayName||r.name))},r.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,GeneratorFunctionPrototype):(t.__proto__=GeneratorFunctionPrototype,c(t,u,"GeneratorFunction")),t.prototype=Object.create(v),t},r.awrap=function(t){return{__await:t}},g(AsyncIterator.prototype),c(AsyncIterator.prototype,a,(function(){return this})),r.AsyncIterator=AsyncIterator,r.async=function(t,e,n,o,i){void 0===i&&(i=Promise);var a=new AsyncIterator(h(t,e,n,o),i);return r.isGeneratorFunction(e)?a:a.next().then((function(t){return t.done?t.value:a.next()}))},g(v),c(v,u,"Generator"),c(v,i,(function(){return this})),c(v,"toString",(function(){return"[object Generator]"})),r.keys=function(t){var r=Object(t),e=[];for(var n in r)e.unshift(n);return function t(){for(;e.length;)if((n=e.pop())in r)return t.value=n,t.done=!1,t;return t.done=!0,t}},r.values=x,Context.prototype={constructor:Context,reset:function reset(r){if(this.prev=this.next=0,this.sent=this._sent=t,this.done=!1,this.delegate=null,this.method="next",this.arg=t,this.tryEntries.forEach(m),!r)for(var e in this)"t"===e.charAt(0)&&n.call(this,e)&&!isNaN(+e.slice(1))&&(this[e]=t)},stop:function stop(){this.done=!0;var t=this.tryEntries[0][4];if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function dispatchException(r){if(this.done)throw r;var e=this;function n(t){a.type="throw",a.arg=r,e.next=t}for(var o=e.tryEntries.length-1;o>=0;--o){var i=this.tryEntries[o],a=i[4],u=this.prev,c=i[1],h=i[2];if(-1===i[0])return n("end"),!1;if(!c&&!h)throw Error("try statement without catch or finally");if(null!=i[0]&&i[0]<=u){if(u<c)return this.method="next",this.arg=t,n(c),!0;if(u<h)return n(h),!1}}},abrupt:function abrupt(t,r){for(var e=this.tryEntries.length-1;e>=0;--e){var n=this.tryEntries[e];if(n[0]>-1&&n[0]<=this.prev&&this.prev<n[2]){var o=n;break}}o&&("break"===t||"continue"===t)&&o[0]<=r&&r<=o[2]&&(o=null);var i=o?o[4]:{};return i.type=t,i.arg=r,o?(this.method="next",this.next=o[2],f):this.complete(i)},complete:function complete(t,r){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&r&&(this.next=r),f},finish:function finish(t){for(var r=this.tryEntries.length-1;r>=0;--r){var e=this.tryEntries[r];if(e[2]===t)return this.complete(e[4],e[3]),m(e),f}},catch:function _catch(t){for(var r=this.tryEntries.length-1;r>=0;--r){var e=this.tryEntries[r];if(e[0]===t){var n=e[4];if("throw"===n.type){var o=n.arg;m(e)}return o}}throw Error("illegal catch attempt")},delegateYield:function delegateYield(r,e,n){return this.delegate={i:x(r),r:e,n},"next"===this.method&&(this.arg=t),f}},r}function asyncGeneratorStep(n,t,e,r,o,a,c){try{var i=n[a](c),u=i.value}catch(n){return void e(n)}i.done?t(u):Promise.resolve(u).then(r,o)}function _asyncToGenerator(n){return function(){var t=this,e=arguments;return new Promise((function(r,o){var a=n.apply(t,e);function _next(n){asyncGeneratorStep(a,r,o,_next,_throw,"next",n)}function _throw(n){asyncGeneratorStep(a,r,o,_next,_throw,"throw",n)}_next(void 0)}))}}var loadedMbtiles={},parseTileParams=function parseTileParams(url){var urlParts=url.split("://"),mbtilesParts=(urlParts.length>2?urlParts[1]+"://"+urlParts[2]:urlParts[1]).split("/"),mbtilesPartsLength=mbtilesParts.length,y=mbtilesParts.splice(mbtilesPartsLength-1,1)[0],x=mbtilesParts.splice(mbtilesPartsLength-2,1)[0],z=mbtilesParts.splice(mbtilesPartsLength-3,1)[0];return{filename:mbtilesParts.join("/"),z,x,y}},getMbtilesDbHandler=function(){var _ref2=_asyncToGenerator(_regeneratorRuntime().mark((function _callee(_ref){var filename,SQL,fetched,buf,db;return _regeneratorRuntime().wrap((function _callee$(_context){for(;;)switch(_context.prev=_context.next){case 0:if(filename=_ref.filename,loadedMbtiles[filename]){_context.next=13;break}return _context.next=4,sql_wasm_default()();case 4:return SQL=_context.sent,_context.next=7,fetch(filename);case 7:return fetched=_context.sent,_context.next=10,fetched.arrayBuffer();case 10:buf=_context.sent,db=new SQL.Database(new Uint8Array(buf)),loadedMbtiles[filename]=db;case 13:return _context.abrupt("return",loadedMbtiles[filename]);case 14:case"end":return _context.stop()}}),_callee)})));return function getMbtilesDbHandler(_x){return _ref2.apply(this,arguments)}}();function getBufferFromMbtiles(_x2){return _getBufferFromMbtiles.apply(this,arguments)}function _getBufferFromMbtiles(){return(_getBufferFromMbtiles=_asyncToGenerator(_regeneratorRuntime().mark((function _callee3(params){var db,query;return _regeneratorRuntime().wrap((function _callee3$(_context3){for(;;)switch(_context3.prev=_context3.next){case 0:return _context3.next=2,getMbtilesDbHandler(params);case 2:return db=_context3.sent,query="SELECT tile_data FROM tiles WHERE zoom_level = "+params.z+" AND tile_column = "+params.x+" AND tile_row = "+(Math.pow(2,parseInt(params.z))-parseInt(params.y)-1),_context3.abrupt("return",new Promise((function(resolve,reject){try{var _binData,result=db.exec(query);if(1!==result.length)return void reject(new Error("Tile not found."));var binData,resultData=result[0].values[0][0];if(null===(_binData=binData=31===resultData[0]&&139===resultData[1]?pako_esm.UD(resultData):resultData)||void 0===_binData||!_binData.buffer)return void reject(new Error("Tile not found."));resolve(binData.buffer)}catch(error){reject(error)}})));case 5:case"end":return _context3.stop()}}),_callee3)})))).apply(this,arguments)}var mbTilesProtocolHandler=function(){var _ref3=_asyncToGenerator(_regeneratorRuntime().mark((function _callee2(params){var parsedParams,data;return _regeneratorRuntime().wrap((function _callee2$(_context2){for(;;)switch(_context2.prev=_context2.next){case 0:return parsedParams=parseTileParams(params.url),_context2.next=3,getBufferFromMbtiles(parsedParams);case 3:if(!(data=_context2.sent)){_context2.next=6;break}return _context2.abrupt("return",{data});case 6:throw new Error("Tile not found"+parsedParams.filename);case 7:case"end":return _context2.stop()}}),_callee2)})));return function mbTilesProtocolHandler(_x3){return _ref3.apply(this,arguments)}}(),csv=__webpack_require__("./src/protocol_handlers/csv.ts"),topojson=__webpack_require__("./src/protocol_handlers/topojson.ts"),osm=__webpack_require__("./src/protocol_handlers/osm.ts"),xml=__webpack_require__("./src/protocol_handlers/xml.ts"),useAddProtocol=__webpack_require__("./src/hooks/useAddProtocol/useAddProtocol.tsx"),EmptyMapDecorator=__webpack_require__("./src/decorators/EmptyMapDecorator.tsx"),useMap=__webpack_require__("./src/hooks/useMap.ts"),TopToolbar=__webpack_require__("./src/ui_components/TopToolbar.tsx"),Sidebar=__webpack_require__("./src/ui_components/Sidebar.tsx"),AddLayerButton=__webpack_require__("./src/ui_components/AddLayerButton/AddLayerButton.tsx"),LayerContext=__webpack_require__("./src/contexts/LayerContext.tsx"),LayerList=__webpack_require__("./src/ui_components/LayerList/LayerList.tsx"),LayerListItemFactory=__webpack_require__("./src/ui_components/LayerList/LayerListItemFactory.tsx"),config=__webpack_require__("./src/omt_styles/config.ts");const bright={version:8,name:"OSM Bright",metadata:{"mapbox:type":"template","mapbox:groups":{1444849364238.8171:{collapsed:!1,name:"Buildings"},1444849354174.1904:{collapsed:!0,name:"Tunnels"},1444849388993.3071:{collapsed:!1,name:"Land"},1444849242106.713:{collapsed:!1,name:"Places"},1444849382550.77:{collapsed:!1,name:"Water"},1444849345966.4436:{collapsed:!1,name:"Roads"},1444849334699.1902:{collapsed:!0,name:"Bridges"}},"mapbox:autocomposite":!1,"openmaptiles:version":"3.x","openmaptiles:mapbox:owner":"openmaptiles","openmaptiles:mapbox:source:url":"mapbox://openmaptiles.4qljc88t"},center:[8.542,47.372],zoom:11.6,bearing:0,pitch:0,sources:{openmaptiles:{type:"vector",url:config.A.sourceOptions_tiles}},sprite:config.A.sprite,glyphs:config.A.glyphs,layers:[{id:"background",type:"background",paint:{"background-color":"#f8f4f0"}},{id:"landcover-glacier",type:"fill",metadata:{"mapbox:group":"1444849388993.3071"},source:"openmaptiles","source-layer":"landcover",filter:["==","subclass","glacier"],layout:{visibility:"visible"},paint:{"fill-color":"#fff","fill-opacity":{base:1,stops:[[0,.9],[10,.3]]}}},{id:"landuse-residential",type:"fill",metadata:{"mapbox:group":"1444849388993.3071"},source:"openmaptiles","source-layer":"landuse",filter:["==","class","residential"],paint:{"fill-color":{base:1,stops:[[12,"hsla(30, 19%, 90%, 0.4)"],[16,"hsla(30, 19%, 90%, 0.2)"]]}}},{id:"landuse-commercial",type:"fill",metadata:{"mapbox:group":"1444849388993.3071"},source:"openmaptiles","source-layer":"landuse",filter:["all",["==","$type","Polygon"],["==","class","commercial"]],paint:{"fill-color":"hsla(0, 60%, 87%, 0.23)"}},{id:"landuse-industrial",type:"fill",metadata:{"mapbox:group":"1444849388993.3071"},source:"openmaptiles","source-layer":"landuse",filter:["all",["==","$type","Polygon"],["==","class","industrial"]],paint:{"fill-color":"hsla(49, 100%, 88%, 0.34)"}},{id:"park",type:"fill",metadata:{"mapbox:group":"1444849388993.3071"},source:"openmaptiles","source-layer":"park",filter:["==","$type","Polygon"],paint:{"fill-color":"#d8e8c8","fill-opacity":{base:1.8,stops:[[9,.5],[12,.2]]}}},{id:"park-outline",type:"line",metadata:{"mapbox:group":"1444849388993.3071"},source:"openmaptiles","source-layer":"park",filter:["==","$type","Polygon"],layout:{},paint:{"line-color":{base:1,stops:[[6,"hsla(96, 40%, 49%, 0.36)"],[8,"hsla(96, 40%, 49%, 0.66)"]]},"line-dasharray":[3,3]}},{id:"landuse-cemetery",type:"fill",metadata:{"mapbox:group":"1444849388993.3071"},source:"openmaptiles","source-layer":"landuse",filter:["==","class","cemetery"],paint:{"fill-color":"#e0e4dd"}},{id:"landuse-hospital",type:"fill",metadata:{"mapbox:group":"1444849388993.3071"},source:"openmaptiles","source-layer":"landuse",filter:["==","class","hospital"],paint:{"fill-color":"#fde"}},{id:"landuse-school",type:"fill",metadata:{"mapbox:group":"1444849388993.3071"},source:"openmaptiles","source-layer":"landuse",filter:["==","class","school"],paint:{"fill-color":"#f0e8f8"}},{id:"landuse-railway",type:"fill",metadata:{"mapbox:group":"1444849388993.3071"},source:"openmaptiles","source-layer":"landuse",filter:["==","class","railway"],paint:{"fill-color":"hsla(30, 19%, 90%, 0.4)"}},{id:"landcover-wood",type:"fill",metadata:{"mapbox:group":"1444849388993.3071"},source:"openmaptiles","source-layer":"landcover",filter:["==","class","wood"],paint:{"fill-color":"#6a4","fill-opacity":.1,"fill-outline-color":"hsla(0, 0%, 0%, 0.03)","fill-antialias":{base:1,stops:[[0,!1],[9,!0]]}}},{id:"landcover-grass",type:"fill",metadata:{"mapbox:group":"1444849388993.3071"},source:"openmaptiles","source-layer":"landcover",filter:["==","class","grass"],paint:{"fill-color":"#d8e8c8","fill-opacity":1}},{id:"landcover-grass-park",type:"fill",metadata:{"mapbox:group":"1444849388993.3071"},source:"openmaptiles","source-layer":"park",filter:["==","class","public_park"],paint:{"fill-color":"#d8e8c8","fill-opacity":.8}},{id:"waterway-other",type:"line",metadata:{"mapbox:group":"1444849382550.77"},source:"openmaptiles","source-layer":"waterway",filter:["!in","class","canal","river","stream"],layout:{"line-cap":"round"},paint:{"line-color":"#a0c8f0","line-width":{base:1.3,stops:[[13,.5],[20,2]]}}},{id:"waterway-stream-canal",type:"line",metadata:{"mapbox:group":"1444849382550.77"},source:"openmaptiles","source-layer":"waterway",filter:["in","class","canal","stream"],layout:{"line-cap":"round"},paint:{"line-color":"#a0c8f0","line-width":{base:1.3,stops:[[13,.5],[20,6]]}}},{id:"waterway-river",type:"line",metadata:{"mapbox:group":"1444849382550.77"},source:"openmaptiles","source-layer":"waterway",filter:["==","class","river"],layout:{"line-cap":"round"},paint:{"line-color":"#a0c8f0","line-width":{base:1.2,stops:[[10,.8],[20,6]]}}},{id:"water-offset",type:"fill",metadata:{"mapbox:group":"1444849382550.77"},source:"openmaptiles","source-layer":"water",maxzoom:8,filter:["==","$type","Polygon"],layout:{visibility:"visible"},paint:{"fill-opacity":1,"fill-color":"#a0c8f0","fill-translate":{base:1,stops:[[6,[2,0]],[8,[0,0]]]}}},{id:"water",type:"fill",metadata:{"mapbox:group":"1444849382550.77"},source:"openmaptiles","source-layer":"water",layout:{visibility:"visible"},paint:{"fill-color":"hsl(210, 67%, 85%)"}},{id:"water-pattern",type:"fill",metadata:{"mapbox:group":"1444849382550.77"},source:"openmaptiles","source-layer":"water",layout:{visibility:"visible"},paint:{"fill-translate":[0,2.5],"fill-pattern":"wave"}},{id:"landcover-ice-shelf",type:"fill",metadata:{"mapbox:group":"1444849382550.77"},source:"openmaptiles","source-layer":"landcover",filter:["==","subclass","ice_shelf"],layout:{visibility:"visible"},paint:{"fill-color":"#fff","fill-opacity":{base:1,stops:[[0,.9],[10,.3]]}}},{id:"building",type:"fill",metadata:{"mapbox:group":"1444849364238.8171"},source:"openmaptiles","source-layer":"building",paint:{"fill-color":{base:1,stops:[[15.5,"#f2eae2"],[16,"#dfdbd7"]]},"fill-antialias":!0}},{id:"building-top",type:"fill",metadata:{"mapbox:group":"1444849364238.8171"},source:"openmaptiles","source-layer":"building",layout:{visibility:"visible"},paint:{"fill-translate":{base:1,stops:[[14,[0,0]],[16,[-2,-2]]]},"fill-outline-color":"#dfdbd7","fill-color":"#f2eae2","fill-opacity":{base:1,stops:[[13,0],[16,1]]}}},{id:"tunnel-service-track-casing",type:"line",metadata:{"mapbox:group":"1444849354174.1904"},source:"openmaptiles","source-layer":"transportation",filter:["all",["==","brunnel","tunnel"],["in","class","service","track"]],layout:{"line-join":"round"},paint:{"line-color":"#cfcdca","line-dasharray":[.5,.25],"line-width":{base:1.2,stops:[[15,1],[16,4],[20,11]]}}},{id:"tunnel-minor-casing",type:"line",metadata:{"mapbox:group":"1444849354174.1904"},source:"openmaptiles","source-layer":"transportation",filter:["all",["==","brunnel","tunnel"],["==","class","minor"]],layout:{"line-join":"round"},paint:{"line-color":"#cfcdca","line-opacity":{stops:[[12,0],[12.5,1]]},"line-width":{base:1.2,stops:[[12,.5],[13,1],[14,4],[20,15]]}}},{id:"tunnel-secondary-tertiary-casing",type:"line",metadata:{"mapbox:group":"1444849354174.1904"},source:"openmaptiles","source-layer":"transportation",filter:["all",["==","brunnel","tunnel"],["in","class","secondary","tertiary"]],layout:{"line-join":"round"},paint:{"line-color":"#e9ac77","line-opacity":1,"line-width":{base:1.2,stops:[[8,1.5],[20,17]]}}},{id:"tunnel-trunk-primary-casing",type:"line",metadata:{"mapbox:group":"1444849354174.1904"},source:"openmaptiles","source-layer":"transportation",filter:["all",["==","brunnel","tunnel"],["in","class","primary","trunk"]],layout:{"line-join":"round"},paint:{"line-color":"#e9ac77","line-width":{base:1.2,stops:[[5,.4],[6,.6],[7,1.5],[20,22]]}}},{id:"tunnel-motorway-casing",type:"line",metadata:{"mapbox:group":"1444849354174.1904"},source:"openmaptiles","source-layer":"transportation",filter:["all",["==","brunnel","tunnel"],["==","class","motorway"]],layout:{"line-join":"round",visibility:"visible"},paint:{"line-color":"#e9ac77","line-dasharray":[.5,.25],"line-width":{base:1.2,stops:[[5,.4],[6,.6],[7,1.5],[20,22]]}}},{id:"tunnel-path",type:"line",metadata:{"mapbox:group":"1444849354174.1904"},source:"openmaptiles","source-layer":"transportation",filter:["all",["==","$type","LineString"],["all",["==","brunnel","tunnel"],["==","class","path"]]],paint:{"line-color":"#cba","line-dasharray":[1.5,.75],"line-width":{base:1.2,stops:[[15,1.2],[20,4]]}}},{id:"tunnel-service-track",type:"line",metadata:{"mapbox:group":"1444849354174.1904"},source:"openmaptiles","source-layer":"transportation",filter:["all",["==","brunnel","tunnel"],["in","class","service","track"]],layout:{"line-join":"round"},paint:{"line-color":"#fff","line-width":{base:1.2,stops:[[15.5,0],[16,2],[20,7.5]]}}},{id:"tunnel-minor",type:"line",metadata:{"mapbox:group":"1444849354174.1904"},source:"openmaptiles","source-layer":"transportation",filter:["all",["==","brunnel","tunnel"],["==","class","minor_road"]],layout:{"line-join":"round"},paint:{"line-color":"#fff","line-opacity":1,"line-width":{base:1.2,stops:[[13.5,0],[14,2.5],[20,11.5]]}}},{id:"tunnel-secondary-tertiary",type:"line",metadata:{"mapbox:group":"1444849354174.1904"},source:"openmaptiles","source-layer":"transportation",filter:["all",["==","brunnel","tunnel"],["in","class","secondary","tertiary"]],layout:{"line-join":"round"},paint:{"line-color":"#fff4c6","line-width":{base:1.2,stops:[[6.5,0],[7,.5],[20,10]]}}},{id:"tunnel-trunk-primary",type:"line",metadata:{"mapbox:group":"1444849354174.1904"},source:"openmaptiles","source-layer":"transportation",filter:["all",["==","brunnel","tunnel"],["in","class","primary","trunk"]],layout:{"line-join":"round"},paint:{"line-color":"#fff4c6","line-width":{base:1.2,stops:[[6.5,0],[7,.5],[20,18]]}}},{id:"tunnel-motorway",type:"line",metadata:{"mapbox:group":"1444849354174.1904"},source:"openmaptiles","source-layer":"transportation",filter:["all",["==","brunnel","tunnel"],["==","class","motorway"]],layout:{"line-join":"round",visibility:"visible"},paint:{"line-color":"#ffdaa6","line-width":{base:1.2,stops:[[6.5,0],[7,.5],[20,18]]}}},{id:"tunnel-railway",type:"line",metadata:{"mapbox:group":"1444849354174.1904"},source:"openmaptiles","source-layer":"transportation",filter:["all",["==","brunnel","tunnel"],["==","class","rail"]],paint:{"line-color":"#bbb","line-width":{base:1.4,stops:[[14,.4],[15,.75],[20,2]]},"line-dasharray":[2,2]}},{id:"aeroway-taxiway-casing",type:"line",metadata:{"mapbox:group":"1444849345966.4436"},source:"openmaptiles","source-layer":"aeroway",minzoom:12,filter:["all",["in","class","taxiway"]],layout:{"line-cap":"round","line-join":"round",visibility:"visible"},paint:{"line-color":"rgba(153, 153, 153, 1)","line-width":{base:1.5,stops:[[11,2],[17,12]]},"line-opacity":1}},{id:"aeroway-runway-casing",type:"line",metadata:{"mapbox:group":"1444849345966.4436"},source:"openmaptiles","source-layer":"aeroway",minzoom:12,filter:["all",["in","class","runway"]],layout:{"line-cap":"round","line-join":"round",visibility:"visible"},paint:{"line-color":"rgba(153, 153, 153, 1)","line-width":{base:1.5,stops:[[11,5],[17,55]]},"line-opacity":1}},{id:"aeroway-area",type:"fill",metadata:{"mapbox:group":"1444849345966.4436"},source:"openmaptiles","source-layer":"aeroway",minzoom:4,filter:["all",["==","$type","Polygon"],["in","class","runway","taxiway"]],layout:{visibility:"visible"},paint:{"fill-opacity":{base:1,stops:[[13,0],[14,1]]},"fill-color":"rgba(255, 255, 255, 1)"}},{id:"aeroway-taxiway",type:"line",metadata:{"mapbox:group":"1444849345966.4436"},source:"openmaptiles","source-layer":"aeroway",minzoom:4,filter:["all",["in","class","taxiway"],["==","$type","LineString"]],layout:{"line-cap":"round","line-join":"round",visibility:"visible"},paint:{"line-color":"rgba(255, 255, 255, 1)","line-width":{base:1.5,stops:[[11,1],[17,10]]},"line-opacity":{base:1,stops:[[11,0],[12,1]]}}},{id:"aeroway-runway",type:"line",metadata:{"mapbox:group":"1444849345966.4436"},source:"openmaptiles","source-layer":"aeroway",minzoom:4,filter:["all",["in","class","runway"],["==","$type","LineString"]],layout:{"line-cap":"round","line-join":"round",visibility:"visible"},paint:{"line-color":"rgba(255, 255, 255, 1)","line-width":{base:1.5,stops:[[11,4],[17,50]]},"line-opacity":{base:1,stops:[[11,0],[12,1]]}}},{id:"highway-area",type:"fill",metadata:{"mapbox:group":"1444849345966.4436"},source:"openmaptiles","source-layer":"transportation",filter:["==","$type","Polygon"],layout:{visibility:"visible"},paint:{"fill-color":"hsla(0, 0%, 89%, 0.56)","fill-outline-color":"#cfcdca","fill-opacity":.9,"fill-antialias":!1}},{id:"highway-motorway-link-casing",type:"line",metadata:{"mapbox:group":"1444849345966.4436"},source:"openmaptiles","source-layer":"transportation",minzoom:12,filter:["all",["!in","brunnel","bridge","tunnel"],["==","class","motorway_link"]],layout:{"line-cap":"round","line-join":"round"},paint:{"line-color":"#e9ac77","line-opacity":1,"line-width":{base:1.2,stops:[[12,1],[13,3],[14,4],[20,15]]}}},{id:"highway-link-casing",type:"line",metadata:{"mapbox:group":"1444849345966.4436"},source:"openmaptiles","source-layer":"transportation",minzoom:13,filter:["all",["!in","brunnel","bridge","tunnel"],["in","class","primary_link","secondary_link","tertiary_link","trunk_link"]],layout:{"line-cap":"round","line-join":"round",visibility:"visible"},paint:{"line-color":"#e9ac77","line-opacity":1,"line-width":{base:1.2,stops:[[12,1],[13,3],[14,4],[20,15]]}}},{id:"highway-minor-casing",type:"line",metadata:{"mapbox:group":"1444849345966.4436"},source:"openmaptiles","source-layer":"transportation",filter:["all",["==","$type","LineString"],["all",["!=","brunnel","tunnel"],["in","class","minor","service","track"]]],layout:{"line-cap":"round","line-join":"round"},paint:{"line-color":"#cfcdca","line-opacity":{stops:[[12,0],[12.5,1]]},"line-width":{base:1.2,stops:[[12,.5],[13,1],[14,4],[20,15]]}}},{id:"highway-secondary-tertiary-casing",type:"line",metadata:{"mapbox:group":"1444849345966.4436"},source:"openmaptiles","source-layer":"transportation",filter:["all",["!in","brunnel","bridge","tunnel"],["in","class","secondary","tertiary"]],layout:{"line-cap":"round","line-join":"round",visibility:"visible"},paint:{"line-color":"#e9ac77","line-opacity":1,"line-width":{base:1.2,stops:[[8,1.5],[20,17]]}}},{id:"highway-primary-casing",type:"line",metadata:{"mapbox:group":"1444849345966.4436"},source:"openmaptiles","source-layer":"transportation",minzoom:5,filter:["all",["!in","brunnel","bridge","tunnel"],["in","class","primary"]],layout:{"line-cap":"round","line-join":"round",visibility:"visible"},paint:{"line-color":"#e9ac77","line-opacity":{stops:[[7,0],[8,1]]},"line-width":{base:1.2,stops:[[7,0],[8,.6],[9,1.5],[20,22]]}}},{id:"highway-trunk-casing",type:"line",metadata:{"mapbox:group":"1444849345966.4436"},source:"openmaptiles","source-layer":"transportation",minzoom:5,filter:["all",["!in","brunnel","bridge","tunnel"],["in","class","trunk"]],layout:{"line-cap":"round","line-join":"round",visibility:"visible"},paint:{"line-color":"#e9ac77","line-opacity":{stops:[[5,0],[6,1]]},"line-width":{base:1.2,stops:[[5,0],[6,.6],[7,1.5],[20,22]]}}},{id:"highway-motorway-casing",type:"line",metadata:{"mapbox:group":"1444849345966.4436"},source:"openmaptiles","source-layer":"transportation",minzoom:4,filter:["all",["!in","brunnel","bridge","tunnel"],["==","class","motorway"]],layout:{"line-cap":"round","line-join":"round",visibility:"visible"},paint:{"line-color":"#e9ac77","line-width":{base:1.2,stops:[[4,0],[5,.4],[6,.6],[7,1.5],[20,22]]},"line-opacity":{stops:[[4,0],[5,1]]}}},{id:"highway-path",type:"line",metadata:{"mapbox:group":"1444849345966.4436"},source:"openmaptiles","source-layer":"transportation",filter:["all",["==","$type","LineString"],["all",["!in","brunnel","bridge","tunnel"],["==","class","path"]]],paint:{"line-color":"#cba","line-dasharray":[1.5,.75],"line-width":{base:1.2,stops:[[15,1.2],[20,4]]}}},{id:"highway-motorway-link",type:"line",metadata:{"mapbox:group":"1444849345966.4436"},source:"openmaptiles","source-layer":"transportation",minzoom:12,filter:["all",["!in","brunnel","bridge","tunnel"],["==","class","motorway_link"]],layout:{"line-cap":"round","line-join":"round"},paint:{"line-color":"#fc8","line-width":{base:1.2,stops:[[12.5,0],[13,1.5],[14,2.5],[20,11.5]]}}},{id:"highway-link",type:"line",metadata:{"mapbox:group":"1444849345966.4436"},source:"openmaptiles","source-layer":"transportation",minzoom:13,filter:["all",["!in","brunnel","bridge","tunnel"],["in","class","primary_link","secondary_link","tertiary_link","trunk_link"]],layout:{"line-cap":"round","line-join":"round",visibility:"visible"},paint:{"line-color":"#fea","line-width":{base:1.2,stops:[[12.5,0],[13,1.5],[14,2.5],[20,11.5]]}}},{id:"highway-minor",type:"line",metadata:{"mapbox:group":"1444849345966.4436"},source:"openmaptiles","source-layer":"transportation",filter:["all",["==","$type","LineString"],["all",["!=","brunnel","tunnel"],["in","class","minor","service","track"]]],layout:{"line-cap":"round","line-join":"round"},paint:{"line-color":"#fff","line-opacity":1,"line-width":{base:1.2,stops:[[13.5,0],[14,2.5],[20,11.5]]}}},{id:"highway-secondary-tertiary",type:"line",metadata:{"mapbox:group":"1444849345966.4436"},source:"openmaptiles","source-layer":"transportation",filter:["all",["!in","brunnel","bridge","tunnel"],["in","class","secondary","tertiary"]],layout:{"line-cap":"round","line-join":"round",visibility:"visible"},paint:{"line-color":"#fea","line-width":{base:1.2,stops:[[6.5,0],[8,.5],[20,13]]}}},{id:"highway-primary",type:"line",metadata:{"mapbox:group":"1444849345966.4436"},source:"openmaptiles","source-layer":"transportation",filter:["all",["==","$type","LineString"],["all",["!in","brunnel","bridge","tunnel"],["in","class","primary"]]],layout:{"line-cap":"round","line-join":"round",visibility:"visible"},paint:{"line-color":"#fea","line-width":{base:1.2,stops:[[8.5,0],[9,.5],[20,18]]}}},{id:"highway-trunk",type:"line",metadata:{"mapbox:group":"1444849345966.4436"},source:"openmaptiles","source-layer":"transportation",filter:["all",["==","$type","LineString"],["all",["!in","brunnel","bridge","tunnel"],["in","class","trunk"]]],layout:{"line-cap":"round","line-join":"round",visibility:"visible"},paint:{"line-color":"#fea","line-width":{base:1.2,stops:[[6.5,0],[7,.5],[20,18]]}}},{id:"highway-motorway",type:"line",metadata:{"mapbox:group":"1444849345966.4436"},source:"openmaptiles","source-layer":"transportation",minzoom:5,filter:["all",["==","$type","LineString"],["all",["!in","brunnel","bridge","tunnel"],["==","class","motorway"]]],layout:{"line-cap":"round","line-join":"round",visibility:"visible"},paint:{"line-color":"#fc8","line-width":{base:1.2,stops:[[6.5,0],[7,.5],[20,18]]}}},{id:"railway-service",type:"line",metadata:{"mapbox:group":"1444849345966.4436"},source:"openmaptiles","source-layer":"transportation",filter:["all",["==","$type","LineString"],["all",["==","class","rail"],["has","service"]]],paint:{"line-color":"hsla(0, 0%, 73%, 0.77)","line-width":{base:1.4,stops:[[14,.4],[20,1]]}}},{id:"railway-service-hatching",type:"line",metadata:{"mapbox:group":"1444849345966.4436"},source:"openmaptiles","source-layer":"transportation",filter:["all",["==","$type","LineString"],["all",["==","class","rail"],["has","service"]]],layout:{visibility:"visible"},paint:{"line-color":"hsla(0, 0%, 73%, 0.68)","line-dasharray":[.2,8],"line-width":{base:1.4,stops:[[14.5,0],[15,2],[20,6]]}}},{id:"railway",type:"line",metadata:{"mapbox:group":"1444849345966.4436"},source:"openmaptiles","source-layer":"transportation",filter:["all",["==","$type","LineString"],["all",["!has","service"],["!in","brunnel","bridge","tunnel"],["==","class","rail"]]],paint:{"line-color":"#bbb","line-width":{base:1.4,stops:[[14,.4],[15,.75],[20,2]]}}},{id:"railway-hatching",type:"line",metadata:{"mapbox:group":"1444849345966.4436"},source:"openmaptiles","source-layer":"transportation",filter:["all",["==","$type","LineString"],["all",["!has","service"],["!in","brunnel","bridge","tunnel"],["==","class","rail"]]],paint:{"line-color":"#bbb","line-dasharray":[.2,8],"line-width":{base:1.4,stops:[[14.5,0],[15,3],[20,8]]}}},{id:"bridge-motorway-link-casing",type:"line",metadata:{"mapbox:group":"1444849334699.1902"},source:"openmaptiles","source-layer":"transportation",filter:["all",["==","brunnel","bridge"],["==","class","motorway_link"]],layout:{"line-join":"round"},paint:{"line-color":"#e9ac77","line-opacity":1,"line-width":{base:1.2,stops:[[12,1],[13,3],[14,4],[20,15]]}}},{id:"bridge-link-casing",type:"line",metadata:{"mapbox:group":"1444849334699.1902"},source:"openmaptiles","source-layer":"transportation",filter:["all",["==","brunnel","bridge"],["in","class","primary_link","secondary_link","tertiary_link","trunk_link"]],layout:{"line-join":"round"},paint:{"line-color":"#e9ac77","line-opacity":1,"line-width":{base:1.2,stops:[[12,1],[13,3],[14,4],[20,15]]}}},{id:"bridge-secondary-tertiary-casing",type:"line",metadata:{"mapbox:group":"1444849334699.1902"},source:"openmaptiles","source-layer":"transportation",filter:["all",["==","brunnel","bridge"],["in","class","secondary","tertiary"]],layout:{"line-join":"round"},paint:{"line-color":"#e9ac77","line-opacity":1,"line-width":{base:1.2,stops:[[8,1.5],[20,28]]}}},{id:"bridge-trunk-primary-casing",type:"line",metadata:{"mapbox:group":"1444849334699.1902"},source:"openmaptiles","source-layer":"transportation",filter:["all",["==","brunnel","bridge"],["in","class","primary","trunk"]],layout:{"line-join":"round"},paint:{"line-color":"hsl(28, 76%, 67%)","line-width":{base:1.2,stops:[[5,.4],[6,.6],[7,1.5],[20,26]]}}},{id:"bridge-motorway-casing",type:"line",metadata:{"mapbox:group":"1444849334699.1902"},source:"openmaptiles","source-layer":"transportation",filter:["all",["==","brunnel","bridge"],["==","class","motorway"]],layout:{"line-join":"round"},paint:{"line-color":"#e9ac77","line-width":{base:1.2,stops:[[5,.4],[6,.6],[7,1.5],[20,22]]}}},{id:"bridge-path-casing",type:"line",metadata:{"mapbox:group":"1444849334699.1902"},source:"openmaptiles","source-layer":"transportation",filter:["all",["==","$type","LineString"],["all",["==","brunnel","bridge"],["==","class","path"]]],paint:{"line-color":"#f8f4f0","line-width":{base:1.2,stops:[[15,1.2],[20,18]]}}},{id:"bridge-path",type:"line",metadata:{"mapbox:group":"1444849334699.1902"},source:"openmaptiles","source-layer":"transportation",filter:["all",["==","$type","LineString"],["all",["==","brunnel","bridge"],["==","class","path"]]],paint:{"line-color":"#cba","line-width":{base:1.2,stops:[[15,1.2],[20,4]]},"line-dasharray":[1.5,.75]}},{id:"bridge-motorway-link",type:"line",metadata:{"mapbox:group":"1444849334699.1902"},source:"openmaptiles","source-layer":"transportation",filter:["all",["==","brunnel","bridge"],["==","class","motorway_link"]],layout:{"line-join":"round"},paint:{"line-color":"#fc8","line-width":{base:1.2,stops:[[12.5,0],[13,1.5],[14,2.5],[20,11.5]]}}},{id:"bridge-link",type:"line",metadata:{"mapbox:group":"1444849334699.1902"},source:"openmaptiles","source-layer":"transportation",filter:["all",["==","brunnel","bridge"],["in","class","primary_link","secondary_link","tertiary_link","trunk_link"]],layout:{"line-join":"round"},paint:{"line-color":"#fea","line-width":{base:1.2,stops:[[12.5,0],[13,1.5],[14,2.5],[20,11.5]]}}},{id:"bridge-secondary-tertiary",type:"line",metadata:{"mapbox:group":"1444849334699.1902"},source:"openmaptiles","source-layer":"transportation",filter:["all",["==","brunnel","bridge"],["in","class","secondary","tertiary"]],layout:{"line-join":"round"},paint:{"line-color":"#fea","line-width":{base:1.2,stops:[[6.5,0],[7,.5],[20,20]]}}},{id:"bridge-trunk-primary",type:"line",metadata:{"mapbox:group":"1444849334699.1902"},source:"openmaptiles","source-layer":"transportation",filter:["all",["==","brunnel","bridge"],["in","class","primary","trunk"]],layout:{"line-join":"round"},paint:{"line-color":"#fea","line-width":{base:1.2,stops:[[6.5,0],[7,.5],[20,18]]}}},{id:"bridge-motorway",type:"line",metadata:{"mapbox:group":"1444849334699.1902"},source:"openmaptiles","source-layer":"transportation",filter:["all",["==","brunnel","bridge"],["==","class","motorway"]],layout:{"line-join":"round"},paint:{"line-color":"#fc8","line-width":{base:1.2,stops:[[6.5,0],[7,.5],[20,18]]}}},{id:"bridge-railway",type:"line",metadata:{"mapbox:group":"1444849334699.1902"},source:"openmaptiles","source-layer":"transportation",filter:["all",["==","brunnel","bridge"],["==","class","rail"]],paint:{"line-color":"#bbb","line-width":{base:1.4,stops:[[14,.4],[15,.75],[20,2]]}}},{id:"bridge-railway-hatching",type:"line",metadata:{"mapbox:group":"1444849334699.1902"},source:"openmaptiles","source-layer":"transportation",filter:["all",["==","brunnel","bridge"],["==","class","rail"]],paint:{"line-color":"#bbb","line-dasharray":[.2,8],"line-width":{base:1.4,stops:[[14.5,0],[15,3],[20,8]]}}},{id:"boundary-land-level-4",type:"line",source:"openmaptiles","source-layer":"boundary",filter:["all",["in","admin_level",4,6,8],["!=","maritime",1]],layout:{"line-join":"round"},paint:{"line-color":"#9e9cab","line-dasharray":[3,1,1,1],"line-width":{base:1.4,stops:[[4,.4],[5,1],[12,3]]}}},{id:"boundary-land-level-2",type:"line",source:"openmaptiles","source-layer":"boundary",filter:["all",["==","admin_level",2],["!=","maritime",1]],layout:{"line-cap":"round","line-join":"round"},paint:{"line-color":"hsl(248, 7%, 66%)","line-width":{base:1,stops:[[0,.6],[4,1.4],[5,2],[12,8]]}}},{id:"boundary-water",type:"line",source:"openmaptiles","source-layer":"boundary",filter:["all",["in","admin_level",2,4],["==","maritime",1]],layout:{"line-cap":"round","line-join":"round"},paint:{"line-color":"rgba(154, 189, 214, 1)","line-width":{base:1,stops:[[0,.6],[4,1.4],[5,2],[12,8]]},"line-opacity":{stops:[[6,.6],[10,1]]}}},{id:"waterway-name",type:"symbol",source:"openmaptiles","source-layer":"waterway",minzoom:13,filter:["all",["==","$type","LineString"],["has","name"],["!has","name:de"]],layout:{"text-font":["Open Sans Italic"],"text-size":14,"text-field":"{name:latin} {name:nonlatin}","text-max-width":5,"text-rotation-alignment":"map","symbol-placement":"line","text-letter-spacing":.2,"symbol-spacing":350},paint:{"text-color":"#74aee9","text-halo-width":1.5,"text-halo-color":"rgba(255,255,255,0.7)"}},{id:"waterway-name-en",type:"symbol",source:"openmaptiles","source-layer":"waterway",minzoom:13,filter:["all",["==","$type","LineString"],["has","name"],["has","name:de"]],layout:{"text-font":["Open Sans Italic"],"text-size":14,"text-field":"{name:de} {name:nonlatin}","text-max-width":5,"text-rotation-alignment":"map","symbol-placement":"line","text-letter-spacing":.2,"symbol-spacing":350},paint:{"text-color":"#74aee9","text-halo-width":1.5,"text-halo-color":"rgba(255,255,255,0.7)"}},{id:"water-name-lakeline",type:"symbol",source:"openmaptiles","source-layer":"water_name",filter:["all",["==","$type","LineString"],["!has","name:de"]],layout:{"text-font":["Open Sans Italic"],"text-size":14,"text-field":"{name:latin} {name:nonlatin}","text-max-width":5,"text-rotation-alignment":"map","symbol-placement":"line","symbol-spacing":350,"text-letter-spacing":.2},paint:{"text-color":"#74aee9","text-halo-width":1.5,"text-halo-color":"rgba(255,255,255,0.7)"}},{id:"water-name-lakeline-en",type:"symbol",source:"openmaptiles","source-layer":"water_name",filter:["all",["==","$type","LineString"],["has","name:de"]],layout:{"text-font":["Open Sans Italic"],"text-size":14,"text-field":"{name:de} {name:nonlatin}","text-max-width":5,"text-rotation-alignment":"map","symbol-placement":"line","symbol-spacing":350,"text-letter-spacing":.2},paint:{"text-color":"#74aee9","text-halo-width":1.5,"text-halo-color":"rgba(255,255,255,0.7)"}},{id:"water-name-ocean",type:"symbol",source:"openmaptiles","source-layer":"water_name",filter:["all",["==","$type","Point"],["==","class","ocean"],["!has","name:de"]],layout:{"text-font":["Open Sans Italic"],"text-size":14,"text-field":"{name:latin}\n{name:nonlatin}","text-max-width":5,"text-rotation-alignment":"map","symbol-placement":"point","symbol-spacing":350,"text-letter-spacing":.2},paint:{"text-color":"#74aee9","text-halo-width":1.5,"text-halo-color":"rgba(255,255,255,0.7)"}},{id:"water-name-ocean-en",type:"symbol",source:"openmaptiles","source-layer":"water_name",filter:["all",["==","$type","Point"],["==","class","ocean"],["has","name:de"]],layout:{"text-font":["Open Sans Italic"],"text-size":14,"text-field":"{name:de}\n{name:nonlatin}","text-max-width":5,"text-rotation-alignment":"map","symbol-placement":"point","symbol-spacing":350,"text-letter-spacing":.2},paint:{"text-color":"#74aee9","text-halo-width":1.5,"text-halo-color":"rgba(255,255,255,0.7)"}},{id:"water-name-other",type:"symbol",source:"openmaptiles","source-layer":"water_name",filter:["all",["==","$type","Point"],["!in","class","ocean"],["!has","name:de"]],layout:{"text-font":["Open Sans Italic"],"text-size":{stops:[[0,10],[6,14]]},"text-field":"{name:latin}\n{name:nonlatin}","text-max-width":5,"text-rotation-alignment":"map","symbol-placement":"point","symbol-spacing":350,"text-letter-spacing":.2,visibility:"visible"},paint:{"text-color":"#74aee9","text-halo-width":1.5,"text-halo-color":"rgba(255,255,255,0.7)"}},{id:"water-name-other-en",type:"symbol",source:"openmaptiles","source-layer":"water_name",filter:["all",["==","$type","Point"],["!in","class","ocean"],["has","name:de"]],layout:{"text-font":["Open Sans Italic"],"text-size":{stops:[[0,10],[6,14]]},"text-field":"{name:de}\n{name:nonlatin}","text-max-width":5,"text-rotation-alignment":"map","symbol-placement":"point","symbol-spacing":350,"text-letter-spacing":.2,visibility:"visible"},paint:{"text-color":"#74aee9","text-halo-width":1.5,"text-halo-color":"rgba(255,255,255,0.7)"}},{id:"poi-level-3",type:"symbol",source:"openmaptiles","source-layer":"poi",minzoom:16,filter:["all",["==","$type","Point"],[">=","rank",25],["!has","name:de"]],layout:{"text-padding":2,"text-font":["Open Sans Semibold"],"text-anchor":"top","icon-image":"{class}_11","text-field":"{name:latin}\n{name:nonlatin}","text-offset":[0,.6],"text-size":12,"text-max-width":9},paint:{"text-halo-blur":.5,"text-color":"#666","text-halo-width":1,"text-halo-color":"#ffffff"}},{id:"poi-level-3-en",type:"symbol",source:"openmaptiles","source-layer":"poi",minzoom:16,filter:["all",["==","$type","Point"],[">=","rank",25],["has","name:de"]],layout:{"text-padding":2,"text-font":["Open Sans Semibold"],"text-anchor":"top","icon-image":"{class}_11","text-field":"{name:de}\n{name:nonlatin}","text-offset":[0,.6],"text-size":12,"text-max-width":9},paint:{"text-halo-blur":.5,"text-color":"#666","text-halo-width":1,"text-halo-color":"#ffffff"}},{id:"poi-level-2",type:"symbol",source:"openmaptiles","source-layer":"poi",minzoom:15,filter:["all",["==","$type","Point"],["all",["<=","rank",24],[">=","rank",15]],["!has","name:de"]],layout:{"text-padding":2,"text-font":["Open Sans Semibold"],"text-anchor":"top","icon-image":"{class}_11","text-field":"{name:latin}\n{name:nonlatin}","text-offset":[0,.6],"text-size":12,"text-max-width":9},paint:{"text-halo-blur":.5,"text-color":"#666","text-halo-width":1,"text-halo-color":"#ffffff"}},{id:"poi-level-2-en",type:"symbol",source:"openmaptiles","source-layer":"poi",minzoom:15,filter:["all",["==","$type","Point"],["all",["<=","rank",24],[">=","rank",15]],["has","name:de"]],layout:{"text-padding":2,"text-font":["Open Sans Semibold"],"text-anchor":"top","icon-image":"{class}_11","text-field":"{name:de}\n{name:nonlatin}","text-offset":[0,.6],"text-size":12,"text-max-width":9},paint:{"text-halo-blur":.5,"text-color":"#666","text-halo-width":1,"text-halo-color":"#ffffff"}},{id:"poi-level-1",type:"symbol",source:"openmaptiles","source-layer":"poi",minzoom:14,filter:["all",["==","$type","Point"],["all",["<=","rank",14],["has","name"]],["!has","name:de"]],layout:{"text-padding":2,"text-font":["Open Sans Semibold"],"text-anchor":"top","icon-image":"{class}_11","text-field":"{name:latin}\n{name:nonlatin}","text-offset":[0,.6],"text-size":12,"text-max-width":9},paint:{"text-halo-blur":.5,"text-color":"#666","text-halo-width":1,"text-halo-color":"#ffffff"}},{id:"poi-level-1-en",type:"symbol",source:"openmaptiles","source-layer":"poi",minzoom:14,filter:["all",["==","$type","Point"],["all",["<=","rank",14],["has","name"]],["has","name:de"]],layout:{"text-padding":2,"text-font":["Open Sans Semibold"],"text-anchor":"top","icon-image":"{class}_11","text-field":"{name:de}\n{name:nonlatin}","text-offset":[0,.6],"text-size":12,"text-max-width":9},paint:{"text-halo-blur":.5,"text-color":"#666","text-halo-width":1,"text-halo-color":"#ffffff"}},{id:"highway-name-path",type:"symbol",source:"openmaptiles","source-layer":"transportation_name",minzoom:15.5,filter:["all",["==","class","path"],["!has","name:de"]],layout:{"text-size":{base:1,stops:[[13,12],[14,13]]},"text-font":["Open Sans Regular"],"text-field":"{name:latin} {name:nonlatin}","symbol-placement":"line","text-rotation-alignment":"map"},paint:{"text-halo-color":"#f8f4f0","text-color":"hsl(30, 23%, 62%)","text-halo-width":.5}},{id:"highway-name-path-en",type:"symbol",source:"openmaptiles","source-layer":"transportation_name",minzoom:15.5,filter:["all",["==","class","path"],["has","name:de"]],layout:{"text-size":{base:1,stops:[[13,12],[14,13]]},"text-font":["Open Sans Regular"],"text-field":"{name:de} {name:nonlatin}","symbol-placement":"line","text-rotation-alignment":"map"},paint:{"text-halo-color":"#f8f4f0","text-color":"hsl(30, 23%, 62%)","text-halo-width":.5}},{id:"highway-name-minor",type:"symbol",source:"openmaptiles","source-layer":"transportation_name",minzoom:15,filter:["all",["==","$type","LineString"],["in","class","minor","service","track"],["!has","name:de"]],layout:{"text-size":{base:1,stops:[[13,12],[14,13]]},"text-font":["Open Sans Regular"],"text-field":"{name:latin} {name:nonlatin}","symbol-placement":"line","text-rotation-alignment":"map"},paint:{"text-halo-blur":.5,"text-color":"#765","text-halo-width":1}},{id:"highway-name-minor-en",type:"symbol",source:"openmaptiles","source-layer":"transportation_name",minzoom:15,filter:["all",["==","$type","LineString"],["in","class","minor","service","track"],["has","name:de"]],layout:{"text-size":{base:1,stops:[[13,12],[14,13]]},"text-font":["Open Sans Regular"],"text-field":"{name:de} {name:nonlatin}","symbol-placement":"line","text-rotation-alignment":"map"},paint:{"text-halo-blur":.5,"text-color":"#765","text-halo-width":1}},{id:"highway-name-major",type:"symbol",source:"openmaptiles","source-layer":"transportation_name",minzoom:12.2,filter:["all",["in","class","primary","secondary","tertiary","trunk"],["!has","name:de"]],layout:{"text-size":{base:1,stops:[[13,12],[14,13]]},"text-font":["Open Sans Regular"],"text-field":"{name:latin} {name:nonlatin}","symbol-placement":"line","text-rotation-alignment":"map"},paint:{"text-halo-blur":.5,"text-color":"#765","text-halo-width":1}},{id:"highway-name-major-en",type:"symbol",source:"openmaptiles","source-layer":"transportation_name",minzoom:12.2,filter:["all",["in","class","primary","secondary","tertiary","trunk"],["has","name:de"]],layout:{"text-size":{base:1,stops:[[13,12],[14,13]]},"text-font":["Open Sans Regular"],"text-field":"{name:de} {name:nonlatin}","symbol-placement":"line","text-rotation-alignment":"map"},paint:{"text-halo-blur":.5,"text-color":"#765","text-halo-width":1}},{id:"highway-shield",type:"symbol",source:"openmaptiles","source-layer":"transportation_name",minzoom:8,filter:["all",["<=","ref_length",6],["==","$type","LineString"],["!in","network","us-interstate","us-highway","us-state"]],layout:{"text-size":10,"icon-image":"road_{ref_length}","icon-rotation-alignment":"viewport","symbol-spacing":200,"text-font":["Open Sans Semibold"],"symbol-placement":{base:1,stops:[[10,"point"],[11,"line"]]},"text-rotation-alignment":"viewport","icon-size":1,"text-field":"{ref}"},paint:{}},{id:"highway-shield-us-interstate",type:"symbol",source:"openmaptiles","source-layer":"transportation_name",minzoom:7,filter:["all",["<=","ref_length",6],["==","$type","LineString"],["in","network","us-interstate"]],layout:{"text-size":10,"icon-image":"{network}_{ref_length}","icon-rotation-alignment":"viewport","symbol-spacing":200,"text-font":["Open Sans Semibold"],"symbol-placement":{base:1,stops:[[7,"point"],[7,"line"],[8,"line"]]},"text-rotation-alignment":"viewport","icon-size":1,"text-field":"{ref}"},paint:{"text-color":"rgba(0, 0, 0, 1)"}},{id:"highway-shield-us-other",type:"symbol",source:"openmaptiles","source-layer":"transportation_name",minzoom:9,filter:["all",["<=","ref_length",6],["==","$type","LineString"],["in","network","us-highway","us-state"]],layout:{"text-size":10,"icon-image":"{network}_{ref_length}","icon-rotation-alignment":"viewport","symbol-spacing":200,"text-font":["Open Sans Semibold"],"symbol-placement":{base:1,stops:[[10,"point"],[11,"line"]]},"text-rotation-alignment":"viewport","icon-size":1,"text-field":"{ref}"},paint:{"text-color":"rgba(0, 0, 0, 1)"}},{id:"place-other",type:"symbol",metadata:{"mapbox:group":"1444849242106.713"},source:"openmaptiles","source-layer":"place",filter:["all",["!in","class","city","town","village"],["!has","name:de"]],layout:{"text-letter-spacing":.1,"text-size":{base:1.2,stops:[[12,10],[15,14]]},"text-font":["Open Sans Bold"],"text-field":"{name:latin}\n{name:nonlatin}","text-transform":"uppercase","text-max-width":9},paint:{"text-color":"#633","text-halo-width":1.2,"text-halo-color":"rgba(255,255,255,0.8)"}},{id:"place-other-en",type:"symbol",metadata:{"mapbox:group":"1444849242106.713"},source:"openmaptiles","source-layer":"place",filter:["all",["!in","class","city","town","village"],["has","name:de"]],layout:{"text-letter-spacing":.1,"text-size":{base:1.2,stops:[[12,10],[15,14]]},"text-font":["Open Sans Bold"],"text-field":"{name:de}\n{name:nonlatin}","text-transform":"uppercase","text-max-width":9},paint:{"text-color":"#633","text-halo-width":1.2,"text-halo-color":"rgba(255,255,255,0.8)"}},{id:"place-village",type:"symbol",metadata:{"mapbox:group":"1444849242106.713"},source:"openmaptiles","source-layer":"place",filter:["all",["==","class","village"],["!has","name:de"]],layout:{"text-font":["Open Sans Regular"],"text-size":{base:1.2,stops:[[10,12],[15,22]]},"text-field":"{name:latin}\n{name:nonlatin}","text-max-width":8},paint:{"text-color":"#333","text-halo-width":1.2,"text-halo-color":"rgba(255,255,255,0.8)"}},{id:"place-village-en",type:"symbol",metadata:{"mapbox:group":"1444849242106.713"},source:"openmaptiles","source-layer":"place",filter:["all",["==","class","village"],["has","name:de"]],layout:{"text-font":["Open Sans Regular"],"text-size":{base:1.2,stops:[[10,12],[15,22]]},"text-field":"{name:de}\n{name:nonlatin}","text-max-width":8},paint:{"text-color":"#333","text-halo-width":1.2,"text-halo-color":"rgba(255,255,255,0.8)"}},{id:"place-town",type:"symbol",metadata:{"mapbox:group":"1444849242106.713"},source:"openmaptiles","source-layer":"place",filter:["all",["==","class","town"],["!has","name:de"]],layout:{"text-font":["Open Sans Regular"],"text-size":{base:1.2,stops:[[10,14],[15,24]]},"text-field":"{name:latin}\n{name:nonlatin}","text-max-width":8},paint:{"text-color":"#333","text-halo-width":1.2,"text-halo-color":"rgba(255,255,255,0.8)"}},{id:"place-town-en",type:"symbol",metadata:{"mapbox:group":"1444849242106.713"},source:"openmaptiles","source-layer":"place",filter:["all",["==","class","town"],["has","name:de"]],layout:{"text-font":["Open Sans Regular"],"text-size":{base:1.2,stops:[[10,14],[15,24]]},"text-field":"{name:de}\n{name:nonlatin}","text-max-width":8},paint:{"text-color":"#333","text-halo-width":1.2,"text-halo-color":"rgba(255,255,255,0.8)"}},{id:"place-city",type:"symbol",metadata:{"mapbox:group":"1444849242106.713"},source:"openmaptiles","source-layer":"place",filter:["all",["!=","capital",2],["==","class","city"],["!has","name:de"]],layout:{"text-font":["Open Sans Semibold"],"text-size":{base:1.2,stops:[[7,14],[11,24]]},"text-field":"{name:latin}\n{name:nonlatin}","text-max-width":8},paint:{"text-color":"#333","text-halo-width":1.2,"text-halo-color":"rgba(255,255,255,0.8)"}},{id:"place-city-en",type:"symbol",metadata:{"mapbox:group":"1444849242106.713"},source:"openmaptiles","source-layer":"place",filter:["all",["!=","capital",2],["==","class","city"],["has","name:de"]],layout:{"text-font":["Open Sans Semibold"],"text-size":{base:1.2,stops:[[7,14],[11,24]]},"text-field":"{name:de}\n{name:nonlatin}","text-max-width":8},paint:{"text-color":"#333","text-halo-width":1.2,"text-halo-color":"rgba(255,255,255,0.8)"}},{id:"place-city-capital",type:"symbol",metadata:{"mapbox:group":"1444849242106.713"},source:"openmaptiles","source-layer":"place",filter:["all",["==","capital",2],["==","class","city"],["!has","name:de"]],layout:{"text-font":["Open Sans Semibold"],"text-size":{base:1.2,stops:[[7,14],[11,24]]},"text-field":"{name:latin}\n{name:nonlatin}","text-max-width":8,"icon-image":"star_11","text-offset":[.4,0],"icon-size":.8,"text-anchor":"left"},paint:{"text-color":"#333","text-halo-width":1.2,"text-halo-color":"rgba(255,255,255,0.8)"}},{id:"place-city-capital-en",type:"symbol",metadata:{"mapbox:group":"1444849242106.713"},source:"openmaptiles","source-layer":"place",filter:["all",["==","capital",2],["==","class","city"],["has","name:de"]],layout:{"text-font":["Open Sans Semibold"],"text-size":{base:1.2,stops:[[7,14],[11,24]]},"text-field":"{name:de}\n{name:nonlatin}","text-max-width":8,"icon-image":"star_11","text-offset":[.4,0],"icon-size":.8,"text-anchor":"left"},paint:{"text-color":"#333","text-halo-width":1.2,"text-halo-color":"rgba(255,255,255,0.8)"}},{id:"place-country-3",type:"symbol",metadata:{"mapbox:group":"1444849242106.713"},source:"openmaptiles","source-layer":"place",filter:["all",["==","class","country"],[">=","rank",3],["!has","name:de"]],layout:{"text-font":["Open Sans Bold"],"text-field":"{name:latin}\n{name:nonlatin}","text-size":{stops:[[3,11],[7,17]]},"text-transform":"uppercase","text-max-width":6.25},paint:{"text-halo-blur":1,"text-color":"#334","text-halo-width":2,"text-halo-color":"rgba(255,255,255,0.8)"}},{id:"place-country-3-en",type:"symbol",metadata:{"mapbox:group":"1444849242106.713"},source:"openmaptiles","source-layer":"place",filter:["all",["==","class","country"],[">=","rank",3],["has","name:de"]],layout:{"text-font":["Open Sans Bold"],"text-field":"{name:de}\n{name:nonlatin}","text-size":{stops:[[3,11],[7,17]]},"text-transform":"uppercase","text-max-width":6.25},paint:{"text-halo-blur":1,"text-color":"#334","text-halo-width":2,"text-halo-color":"rgba(255,255,255,0.8)"}},{id:"place-country-2",type:"symbol",metadata:{"mapbox:group":"1444849242106.713"},source:"openmaptiles","source-layer":"place",filter:["all",["==","class","country"],["==","rank",2],["!has","name:de"]],layout:{"text-font":["Open Sans Bold"],"text-field":"{name:latin}\n{name:nonlatin}","text-size":{stops:[[2,11],[5,17]]},"text-transform":"uppercase","text-max-width":6.25},paint:{"text-halo-blur":1,"text-color":"#334","text-halo-width":2,"text-halo-color":"rgba(255,255,255,0.8)"}},{id:"place-country-2-en",type:"symbol",metadata:{"mapbox:group":"1444849242106.713"},source:"openmaptiles","source-layer":"place",filter:["all",["==","class","country"],["==","rank",2],["has","name:de"]],layout:{"text-font":["Open Sans Bold"],"text-field":"{name:de}\n{name:nonlatin}","text-size":{stops:[[2,11],[5,17]]},"text-transform":"uppercase","text-max-width":6.25},paint:{"text-halo-blur":1,"text-color":"#334","text-halo-width":2,"text-halo-color":"rgba(255,255,255,0.8)"}},{id:"place-country-1",type:"symbol",metadata:{"mapbox:group":"1444849242106.713"},source:"openmaptiles","source-layer":"place",filter:["all",["==","class","country"],["==","rank",1],["!has","name:de"]],layout:{"text-font":["Open Sans Bold"],"text-field":"{name:latin}\n{name:nonlatin}","text-size":{stops:[[1,11],[4,17]]},"text-transform":"uppercase","text-max-width":6.25},paint:{"text-halo-blur":1,"text-color":"#334","text-halo-width":2,"text-halo-color":"rgba(255,255,255,0.8)"}},{id:"place-country-1-en",type:"symbol",metadata:{"mapbox:group":"1444849242106.713"},source:"openmaptiles","source-layer":"place",filter:["all",["==","class","country"],["==","rank",1],["has","name:de"]],layout:{"text-font":["Open Sans Bold"],"text-field":"{name:de}\n{name:nonlatin}","text-size":{stops:[[1,11],[4,17]]},"text-transform":"uppercase","text-max-width":6.25},paint:{"text-halo-blur":1,"text-color":"#334","text-halo-width":2,"text-halo-color":"rgba(255,255,255,0.8)"}},{id:"place-continent",type:"symbol",metadata:{"mapbox:group":"1444849242106.713"},source:"openmaptiles","source-layer":"place",maxzoom:1,filter:["all",["==","class","continent"],["!has","name:de"]],layout:{"text-font":["Open Sans Bold"],"text-field":"{name:latin}\n{name:nonlatin}","text-size":14,"text-max-width":6.25,"text-transform":"uppercase"},paint:{"text-halo-blur":1,"text-color":"#334","text-halo-width":2,"text-halo-color":"rgba(255,255,255,0.8)"}},{id:"place-continent-en",type:"symbol",metadata:{"mapbox:group":"1444849242106.713"},source:"openmaptiles","source-layer":"place",maxzoom:1,filter:["all",["==","class","continent"],["has","name:de"]],layout:{"text-font":["Open Sans Bold"],"text-field":"{name:de}\n{name:nonlatin}","text-size":14,"text-max-width":6.25,"text-transform":"uppercase"},paint:{"text-halo-blur":1,"text-color":"#334","text-halo-width":2,"text-halo-color":"rgba(255,255,255,0.8)"}}]};function DemoDescriptions(props){var itemToDisplay=function itemToDisplay(){return props.json.filter((function(el){return el.item===props.section}))};return itemToDisplay()[0].description?react.createElement(react.Fragment,null,react.createElement(Typography.A,{variant:"h6",marginBottom:3},props.title),react.createElement(Typography.A,{variant:"body1",dangerouslySetInnerHTML:{__html:itemToDisplay()[0].description}})):react.createElement(react.Fragment,null)}const ui_components_DemoDescriptions=DemoDescriptions;try{DemoDescriptions.displayName="DemoDescriptions",DemoDescriptions.__docgenInfo={description:"",displayName:"DemoDescriptions",props:{section:{defaultValue:null,description:"",name:"section",required:!0,type:{name:"string"}},json:{defaultValue:null,description:"",name:"json",required:!0,type:{name:"DemoDescriptionItem[]"}},title:{defaultValue:null,description:"",name:"title",required:!0,type:{name:"string"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/ui_components/DemoDescriptions.tsx#DemoDescriptions"]={docgenInfo:DemoDescriptions.__docgenInfo,name:"DemoDescriptions",path:"src/ui_components/DemoDescriptions.tsx#DemoDescriptions"})}catch(__react_docgen_typescript_loader_error){}const useAddProtocolTexts_namespaceObject=JSON.parse('[{"item":"mbtiles","description":"In this example, an MBtile file containing the countries of the world is loaded to the map through the useAddProtocol hook. The protocol manager registers the contents of the file as a source. We then add in the layer list a Vector tile layer that uses that source. <br> See source file: <a href=\'https://github.com/mapcomponents/react-map-components-maplibre/blob/main/public/mbtiles/countries.mbtiles\' target=”_blank”> countries.mbtiles </a>"},{"item":"csv","description":"<p>The CSVProtocolHandler enables us to load a layer from a table containing the coordinates of one or more points. The table must have a \'latitude\' and a \'longitude\' column. Column names like \'lat\' or \'long\' are automatically recognized by the hook. Other names, as well as a delimiter other than the comma, can be specified in the options.This encoded options object can be added after a \'?\' sign at the end of the url. <br> The url is expected to have the following Format: <br> See source file: <a href=\'https://github.com/mapcomponents/react-map-components-maplibre/blob/main/public/csv/restaurants.csv\' target=”_blank”> restaurants.csv </a></p> <center> <h4>[protocol]://[filePath]?[encodedOptions]</h6> </center> Example: <i> csv://csv/restaurants.csv </i><br> Example of an options object: <i> csv://csv/gemany_100_postcodes.csv?latfield=Axe-y&lonfield=Axe-x&delimiter=%3A </i><br>  Where the enconded parameters represents the following options object:<br> {<br>latfield: \'Axe-y\', <br>lonfield: \'Axe-x\', <br>delimiter: \':\'<br>} "},{"item":"osm","description":"<p> The OSMProtocolHandler will transform OSM type files into a geojson object and register it as a source. The handler accepts an encoded options object in the source url. <br> See source file: <a href=\'https://github.com/mapcomponents/react-map-components-maplibre/blob/main/public/osm/palma.osm\' target=”_blank”> palma.osm </a> <br> The url is expected to have the following Format: <br> </p> <center> <h4>[protocol]://[filePath]?[encodedOptions</h6> </center> Example: <i> osm://osm/palma.osm?completeFeature=true&allFeatures=false&renderTagged=false&excludeWay=false&suppressWay=false </i> <br> Where the enconded parameters represents the following options object: <br> { <br> completeFeature: true, <br> allFeatures: false,<br> renderTagged: false, <br> excludeWay: false, <br> suppressWay: false <br> }"},{"item":"gpx","description":"<p> GPX files can be processed with the XMLProtocolHandler. This will transform the files into a geojson object and register it as a source. <br> See source file: <a href=\'https://github.com/mapcomponents/react-map-components-maplibre/blob/main/public/gpx/santiago.gpx\' target=”_blank”> santiago.gpx </a> <br> The url is expected to have the following Format: <br> </p> <center> <h4>[protocol]://[filePath]</h6> </center> Example: <i> xml://gpx/santiago.gpx </i>"},{"item":"kml","description":"<p> KML files can be processed with the XMLProtocolHandler. This will transform the files into a geojson object and register it as a source. <br> See source file: <a href=\'https://github.com/mapcomponents/react-map-components-maplibre/blob/main/public/kml/cape_may.kml\' target=”_blank”> cape_may.kml </a> <br> The url is expected to have the following Format: <br> </p> <center> <h4>[protocol]://[filePath]</h6> </center> Example: <i> xml://kml/cape_may.gpx </i>"},{"item":"tcx","description":"<p> TCX files can be processed with the XMLProtocolHandler. This will transform the files into a geojson object and register it as a source. <br> See source file: <a href=\'https://github.com/mapcomponents/react-map-components-maplibre/blob/main/public/tcx/example.tcx\' target=”_blank”> example.tcx </a> <br> The url is expected to have the following Format: <br> </p> <center> <h4>[protocol]://[filePath]</h6> </center> Example: <i> xml://tcx/example.tcx </i>"},{"item":"topojson","description":"<p> In this example, a topojson file is loaded with help of The TopojsonProtocolHandler. The handler transforms the topojson into a geojson object and keep register of the origin topojson object in the features properties of the new geojson. <br> See source file: <a href=\'https://github.com/mapcomponents/react-map-components-maplibre/blob/main/public/topojson/usa.topojson\' target=”_blank”> usa.topojson </a></p> <br> The url is expected to have the following Format: <br>  </p> <center> <h4>[protocol]://[filePath]</h6> </center>  "}]');var MlVectorTileLayer=__webpack_require__("./src/components/MlVectorTileLayer/MlVectorTileLayer.tsx"),MlLayer=__webpack_require__("./src/components/MlLayer/MlLayer.tsx"),useSource=__webpack_require__("./src/hooks/useSource.ts");function _toConsumableArray(r){return function _arrayWithoutHoles(r){if(Array.isArray(r))return _arrayLikeToArray(r)}(r)||function _iterableToArray(r){if("undefined"!=typeof Symbol&&null!=r[Symbol.iterator]||null!=r["@@iterator"])return Array.from(r)}(r)||_unsupportedIterableToArray(r)||function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function _slicedToArray(r,e){return function _arrayWithHoles(r){if(Array.isArray(r))return r}(r)||function _iterableToArrayLimit(r,l){var t=null==r?null:"undefined"!=typeof Symbol&&r[Symbol.iterator]||r["@@iterator"];if(null!=t){var e,n,i,u,a=[],f=!0,o=!1;try{if(i=(t=t.call(r)).next,0===l){if(Object(t)!==t)return;f=!1}else for(;!(f=(e=i.call(t)).done)&&(a.push(e.value),a.length!==l);f=!0);}catch(r){o=!0,n=r}finally{try{if(!f&&null!=t.return&&(u=t.return(),Object(u)!==u))return}finally{if(o)throw n}}return a}}(r,e)||_unsupportedIterableToArray(r,e)||function _nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function _unsupportedIterableToArray(r,a){if(r){if("string"==typeof r)return _arrayLikeToArray(r,a);var t={}.toString.call(r).slice(8,-1);return"Object"===t&&r.constructor&&(t=r.constructor.name),"Map"===t||"Set"===t?Array.from(r):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?_arrayLikeToArray(r,a):void 0}}function _arrayLikeToArray(r,a){(null==a||a>r.length)&&(a=r.length);for(var e=0,n=Array(a);e<a;e++)n[e]=r[e];return n}const useAddProtocol_stories={title:"hooks/useAddProtocol",component:useAddProtocol.A,argTypes:{},decorators:EmptyMapDecorator.A};var BackgroundLayers=function BackgroundLayers(){var layerContext=(0,react.useContext)(LayerContext.A);return(0,react.useEffect)((function(){layerContext.updateStyle(bright)}),[]),react.createElement("div",{style:{display:"none"}},react.createElement(LayerList.A,null,react.createElement(LayerListItemFactory.A,{layers:layerContext.layers,setLayers:layerContext.setLayers,insertBeforeLayer:"useAddProtocolLayer",fitBoundsOptions:{padding:{top:50,bottom:50,left:25,right:25}}})))},MbTiles=function MbtilesTemplate(){var mapHook=(0,useMap.A)({mapId:void 0});return(0,useAddProtocol.A)({protocol:"mbtiles",handler:mbTilesProtocolHandler}),(0,react.useEffect)((function(){var _mapHook$map;mapHook.map&&(null===(_mapHook$map=mapHook.map)||void 0===_mapHook$map||_mapHook$map.setZoom(0))}),[mapHook.map]),react.createElement(react.Fragment,null,react.createElement(MlVectorTileLayer.A,{mapId:"map_1",url:"mbtiles://mbtiles/countries.mbtiles/{z}/{x}/{y}",layers:[{id:"countries",type:"fill","source-layer":"countries",layout:{},paint:{"fill-color":"#f9a5f5","fill-opacity":.5}}],insertBeforeLayer:"waterway-name",sourceOptions:{type:"vector",minzoom:0,maxzoom:1}}),react.createElement(BackgroundLayers,null))}.bind({});MbTiles.parameters={name:"MBTiles"},MbTiles.args={};var CSVOrTSV=function CsvTemplate(){var mapHook=(0,useMap.A)({mapId:void 0});return(0,useAddProtocol.A)({protocol:"csv",handler:csv.V}),(0,react.useEffect)((function(){var _mapHook$map2,_mapHook$map4,_mapHook$map3;null!==(_mapHook$map2=mapHook.map)&&void 0!==_mapHook$map2&&_mapHook$map2.getSource("csv-source")||(null===(_mapHook$map3=mapHook.map)||void 0===_mapHook$map3||_mapHook$map3.addSource("csv-source",{type:"geojson",data:"csv://csv/restaurants.csv"}));null===(_mapHook$map4=mapHook.map)||void 0===_mapHook$map4||_mapHook$map4.jumpTo({center:[-74.914516,38.935759],zoom:13})}),[mapHook.map]),react.createElement(react.Fragment,null,react.createElement(MlLayer.A,{layerId:"UseAddProtocolLayer",options:{type:"circle",source:"csv-source",paint:{"circle-color":"#009EE0","circle-stroke-color":"#F0f0f0","circle-stroke-width":2,"circle-radius":18}},insertBeforeLayer:"waterway-name"}),react.createElement(BackgroundLayers,null))}.bind({});CSVOrTSV.parameters={},CSVOrTSV.args={};var CSVWithOptions=function CsvOptionsTemplate(){var mapHook=(0,useMap.A)({mapId:void 0});return(0,useAddProtocol.A)({protocol:"csv",handler:csv.V}),(0,react.useEffect)((function(){var _mapHook$map5,_mapHook$map7;if(null===(_mapHook$map5=mapHook.map)||void 0===_mapHook$map5||!_mapHook$map5.getSource("csv-source")){var _mapHook$map6;null===(_mapHook$map6=mapHook.map)||void 0===_mapHook$map6||_mapHook$map6.addSource("csv-source",{type:"geojson",data:"csv://csv/gemany_100_postcodes.csv".concat("?latfield=Axe-y&lonfield=Axe-x&delimiter=:")})}null===(_mapHook$map7=mapHook.map)||void 0===_mapHook$map7||_mapHook$map7.jumpTo({center:[10.147049,50.871231],zoom:6,speed:2})}),[mapHook.map]),react.createElement(react.Fragment,null,react.createElement(MlLayer.A,{layerId:"UseAddProtocolLayer",options:{type:"circle",source:"csv-source",paint:{"circle-color":"#009EE0","circle-stroke-color":"#F0f0f0","circle-stroke-width":2,"circle-radius":18}},insertBeforeLayer:"waterway-name"}),react.createElement(BackgroundLayers,null))}.bind({});CSVWithOptions.parameters={},CSVWithOptions.args={};var OSM=function OsmTemplate(){var mapHook=(0,useMap.A)({mapId:void 0});return(0,useAddProtocol.A)({protocol:"osm",handler:osm.U}),(0,useSource.A)({sourceId:"osm-source",source:{type:"geojson",data:"osm://osm/palma.osm?completeFeature=true&allFeatures=false&renderTagged=false&excludeWay=false&suppressWay=false"}}),(0,react.useEffect)((function(){var _mapHook$map8,_mapHook$map9;null===(_mapHook$map8=mapHook.map)||void 0===_mapHook$map8||_mapHook$map8.getSource("osm-source"),null===(_mapHook$map9=mapHook.map)||void 0===_mapHook$map9||_mapHook$map9.jumpTo({center:[2.651811,39.571309],zoom:16.5})}),[mapHook.map]),react.createElement(react.Fragment,null,react.createElement(MlLayer.A,{layerId:"UseAddProtocolLayer",options:{type:"line",source:"osm-source",paint:{"line-color":"#9a00ff"}},insertBeforeLayer:"waterway-name"}),react.createElement(BackgroundLayers,null))}.bind({});OSM.parameters={},OSM.args={};var GPX=function GpxTemplate(){var mapHook=(0,useMap.A)({mapId:void 0});return(0,useAddProtocol.A)({protocol:"gpx",handler:xml.O}),(0,react.useEffect)((function(){var _mapHook$map0,_mapHook$map10,_mapHook$map1;null!==(_mapHook$map0=mapHook.map)&&void 0!==_mapHook$map0&&_mapHook$map0.getSource("gpx-source")||(null===(_mapHook$map1=mapHook.map)||void 0===_mapHook$map1||_mapHook$map1.addSource("gpx-source",{type:"geojson",data:"gpx://gpx/santiago.gpx"}));null===(_mapHook$map10=mapHook.map)||void 0===_mapHook$map10||_mapHook$map10.jumpTo({center:[-5.100251,42.887371],zoom:7})}),[mapHook.map]),react.createElement(react.Fragment,null,react.createElement(MlLayer.A,{layerId:"UseAddProtocolLayer",options:{type:"circle",source:"gpx-source",paint:{"circle-color":"#45ff33","circle-stroke-color":"#259913","circle-stroke-width":1,"circle-radius":2}},insertBeforeLayer:"waterway-name"}),react.createElement(BackgroundLayers,null))}.bind({});GPX.parameters={},GPX.args={};var KML=function KmlTemplate(){var mapHook=(0,useMap.A)({mapId:void 0});return(0,useAddProtocol.A)({protocol:"kml",handler:xml.O}),(0,react.useEffect)((function(){var _mapHook$map11,_mapHook$map13,_mapHook$map12;null!==(_mapHook$map11=mapHook.map)&&void 0!==_mapHook$map11&&_mapHook$map11.getSource("kml-source")||(null===(_mapHook$map12=mapHook.map)||void 0===_mapHook$map12||_mapHook$map12.addSource("kml-source",{type:"geojson",data:"kml://kml/cape_may.kml"}));null===(_mapHook$map13=mapHook.map)||void 0===_mapHook$map13||_mapHook$map13.jumpTo({center:[-74.82832,39.093526],zoom:9})}),[mapHook.map]),react.createElement(react.Fragment,null,react.createElement(MlLayer.A,{layerId:"UseAddProtocolLayer",options:{type:"circle",source:"kml-source",paint:{"circle-color":"#ff4533","circle-stroke-color":"#992513","circle-stroke-width":1,"circle-radius":2}},insertBeforeLayer:"waterway-name"}),react.createElement(BackgroundLayers,null))}.bind({});KML.parameters={},KML.args={protocol:"kml",handler:xml.O,sourceId:"fromKML-Source",filePath:"kml/cape_may.kml",flyTo:{center:[-74.82832,39.093526],zoom:9,speed:2}};var TCX=function TcxTemplate(){var mapHook=(0,useMap.A)({mapId:void 0});return(0,useAddProtocol.A)({protocol:"tcx",handler:xml.O}),(0,react.useEffect)((function(){var _mapHook$map14,_mapHook$map16,_mapHook$map15;null!==(_mapHook$map14=mapHook.map)&&void 0!==_mapHook$map14&&_mapHook$map14.getSource("tcx-source")||(null===(_mapHook$map15=mapHook.map)||void 0===_mapHook$map15||_mapHook$map15.addSource("tcx-source",{type:"geojson",data:"tcx://tcx/example.tcx"}));null===(_mapHook$map16=mapHook.map)||void 0===_mapHook$map16||_mapHook$map16.jumpTo({center:[32.711545,34.844962],zoom:9})}),[mapHook.map]),react.createElement(react.Fragment,null,react.createElement(MlLayer.A,{layerId:"UseAddProtocolLayer",options:{type:"circle",source:"tcx-source",paint:{"circle-color":"#ff45fa","circle-stroke-color":"#992578","circle-stroke-width":1,"circle-radius":2}},insertBeforeLayer:"waterway-name"}),react.createElement(BackgroundLayers,null))}.bind({});TCX.parameters={},TCX.args={};var Topojson=function TopojsonTemplate(){var mapHook=(0,useMap.A)({mapId:void 0});return(0,useAddProtocol.A)({protocol:"topojson",handler:topojson.F}),(0,react.useEffect)((function(){var _mapHook$map17,_mapHook$map19,_mapHook$map18;null!==(_mapHook$map17=mapHook.map)&&void 0!==_mapHook$map17&&_mapHook$map17.getSource("topojson-source")||(null===(_mapHook$map18=mapHook.map)||void 0===_mapHook$map18||_mapHook$map18.addSource("topojson-source",{type:"geojson",data:"topojson://topojson/usa.topojson"}));null===(_mapHook$map19=mapHook.map)||void 0===_mapHook$map19||_mapHook$map19.jumpTo({center:[-99.110122,39.827183],zoom:4})}),[mapHook.map]),react.createElement(react.Fragment,null,react.createElement(MlLayer.A,{layerId:"UseAddProtocolLayer",options:{type:"line",source:"topojson-source",paint:{"line-color":["match",["get","fromObject"],"land","#111111","states","#009EE0","counties","#747577","white"],"line-width":["match",["get","fromObject"],"land",3,"states",2,"counties",1,1]}},insertBeforeLayer:"waterway-name"}),react.createElement(BackgroundLayers,null))}.bind({});Topojson.parameters={},Topojson.args={};var currentProps={mbtiles:{protocol:"mbtiles",handler:mbTilesProtocolHandler,sourceID:"fromMBTile-source",filePath:"mbtiles/countries.mbtiles",type:"fill",layers:[{id:"countries",type:"fill","source-layer":"countries",layout:{},paint:{"fill-color":"#f9a5f5","fill-opacity":.5}}],insertBeforeLayer:"waterway-name",sourceOptions:{type:"vector",minzoom:0,maxzoom:1},flyTo:{center:[10.147049,50.871231],zoom:2,speed:2}},csv:{protocol:"csv",handler:csv.V,sourceId:"fromCSV-Source",filePath:"csv/restaurants.csv",type:"circle",paint:{"circle-color":"#009EE0","circle-stroke-color":"#F0f0f0","circle-stroke-width":2,"circle-radius":18},flyTo:{center:[-74.914516,38.935759],zoom:13,speed:2}},csvWithOptions:{protocol:"csv",handler:csv.V,sourceId:"fromCSV-options-Source",filePath:"csv/gemany_100_postcodes.csv",options:{latfield:"Axe-y",lonfield:"Axe-x",delimiter:":"},type:"circle",paint:{"circle-color":"#009EE0","circle-radius":10},flyTo:{center:[10.147049,50.871231],zoom:6,speed:2}},osm:{protocol:"osm",handler:osm.U,sourceId:"fromOSM-Source",filePath:"osm/palma.osm",options:{completeFeature:!0,allFeatures:!1,renderTagged:!1,excludeWay:!1,suppressWay:!1},flyTo:{center:[2.651811,39.571309],zoom:15.5,speed:4}},gpx:{protocol:"gpx",handler:xml.O,sourceId:"fromGPX-Source",filePath:"gpx/santiago.gpx",flyTo:{center:[-5.100251,42.887371],zoom:7,speed:3}},kml:{protocol:"kml",handler:xml.O,sourceId:"fromKML-Source",filePath:"kml/cape_may.kml",flyTo:{center:[-74.82832,39.093526],zoom:9,speed:2}},tcx:{protocol:"tcx",handler:xml.O,sourceId:"fromTCX-Source",filePath:"tcx/example.tcx",flyTo:{center:[32.711545,34.844962],zoom:9,speed:3}},topojson:{protocol:"topojson",handler:topojson.F,sourceId:"fromTopoJson-Source",filePath:"topojson/usa.topojson",paint:{"line-color":["match",["get","fromObject"],"land","#111111","states","#009EE0","counties","#747577","white"],"line-width":["match",["get","fromObject"],"land",3,"states",2,"counties",1,1]},flyTo:{center:[-99.110122,39.827183],zoom:4,speed:2}}},CatalogueDemo=function CatalogueTemplate(){var mapHook=(0,useMap.A)({mapId:void 0}),_useState2=_slicedToArray((0,react.useState)(!0),2),openSidebar=_useState2[0],setOpenSidebar=_useState2[1],layerContext=(0,react.useContext)(LayerContext.A),_useState4=_slicedToArray((0,react.useState)("csv"),2),currentDemo=_useState4[0],setCurrentDemo=_useState4[1],_React$useState2=_slicedToArray(react.useState(null),2),anchorEl=_React$useState2[0],setAnchorEl=_React$useState2[1],open=Boolean(anchorEl),props=currentProps[currentDemo],optionsURL="?"+new URLSearchParams(props.options).toString();return(0,useAddProtocol.A)({protocol:props.protocol,handler:props.handler}),(0,react.useEffect)((function(){layerContext.updateStyle(bright),layerContext.setLayers(["mbtiles"===props.protocol?{type:"vt",name:"useAddProtocolLayer",config:{layerId:"useAddProtocolLayer",url:props.protocol+"://"+props.filePath+"/{z}/{x}/{y}",layers:props.layers,insertBeforeLayer:props.insertBeforeLayer,sourceOptions:props.sourceOptions}}:{type:"geojson",name:"useAddProtocolLayer",config:{layerId:"useAddProtocolLayer",type:props.type||"line",options:{source:props.sourceId},paint:props.paint}}])}),[currentDemo]),(0,react.useEffect)((function(){var _mapHook$map20,_mapHook$map21,_mapHook$map22;null!==(_mapHook$map20=mapHook.map)&&void 0!==_mapHook$map20&&_mapHook$map20.getSource(props.sourceId)||"mbtiles"===props.protocol||(null===(_mapHook$map21=mapHook.map)||void 0===_mapHook$map21||_mapHook$map21.addSource(props.sourceId,{type:"geojson",data:props.protocol+"://"+props.filePath+optionsURL}));props.flyTo&&(null===(_mapHook$map22=mapHook.map)||void 0===_mapHook$map22||_mapHook$map22.flyTo(props.flyTo))}),[mapHook.map,currentDemo]),react.createElement(react.Fragment,null,react.createElement(TopToolbar.A,{buttons:react.createElement(react.Fragment,null,react.createElement(Button.A,{variant:openSidebar?"contained":"outlined",onClick:function onClick(){return setOpenSidebar(!openSidebar)},sx:{marginRight:{xs:"0px",sm:"10px"}}},"Sidebar"),react.createElement(Button.A,{id:"basic-button",variant:"contained","aria-controls":open?"basic-menu":void 0,"aria-haspopup":"true","aria-expanded":open?"true":void 0,onClick:function onClick(event){setAnchorEl(event.currentTarget)}},"Example Configs"),react.createElement(Menu.A,{id:"basic-menu",anchorEl,open,onClose:function onClose(){return setAnchorEl(null)},MenuListProps:{"aria-labelledby":"basic-button"}},Object.keys(currentProps).map((function(el){return react.createElement(MenuItem.A,{onClick:function onClick(){return setCurrentDemo(el)},key:el,selected:el===currentDemo},el)}))))}),react.createElement(Sidebar.A,{open:openSidebar,setOpen:setOpenSidebar,name:props.protocol.toUpperCase()+" demo"},react.createElement(Tooltip.A,{title:"add a new"+props.protocol+" to the map"},react.createElement(AddLayerButton.A,{onComplete:function onComplete(config){return layerContext.setLayers((function(current){return[].concat(_toConsumableArray(current),[config])}))},layerTypes:[props.protocol]})),react.createElement(Box.A,{sx:{height:"35%"}},react.createElement(Typography.A,{variant:"h6"},"Layers"),react.createElement(LayerList.A,null,react.createElement(LayerListItemFactory.A,{layers:layerContext.layers,setLayers:layerContext.setLayers,insertBeforeLayer:"useAddProtocolLayer",fitBoundsOptions:{padding:{top:50,bottom:50,left:25,right:25}}}))),react.createElement(ui_components_DemoDescriptions,{json:useAddProtocolTexts_namespaceObject,section:props.protocol,title:"About this demo: "})))}.bind({});const __namedExportsOrder=["MbTiles","CSVOrTSV","CSVWithOptions","OSM","GPX","KML","TCX","Topojson","CatalogueDemo"];MbTiles.parameters={...MbTiles.parameters,docs:{...MbTiles.parameters?.docs,source:{originalSource:"() => {\n  const mapHook = useMap({\n    mapId: undefined\n  });\n  useAddProtocol({\n    protocol: 'mbtiles',\n    handler: mbTilesProtocolHandler\n  });\n  useEffect(() => {\n    if (!mapHook.map) return;\n    mapHook.map?.setZoom(0);\n  }, [mapHook.map]);\n  return <>\n            <MlVectorTileLayer mapId={'map_1'} url={'mbtiles://mbtiles/countries.mbtiles/{z}/{x}/{y}'} layers={[{\n      id: 'countries',\n      type: 'fill',\n      'source-layer': 'countries',\n      layout: {},\n      paint: {\n        'fill-color': '#f9a5f5',\n        'fill-opacity': 0.5\n      }\n    }] as unknown as LayerSpecification[]} insertBeforeLayer={'waterway-name'} sourceOptions={{\n      type: 'vector',\n      minzoom: 0,\n      maxzoom: 1\n    }} />\n\n            <BackgroundLayers />\n        </>;\n}",...MbTiles.parameters?.docs?.source}}},CSVOrTSV.parameters={...CSVOrTSV.parameters,docs:{...CSVOrTSV.parameters?.docs,source:{originalSource:"() => {\n  const mapHook = useMap({\n    mapId: undefined\n  });\n\n  //  An optional encoded options object can be added after a '?' sign at the end of the url.\n  //  Handlers that support options are:\n  // -CSV/TSV Handler Options: https://github.com/mapbox/csv2geojson/blob/gh-pages/README.md\n\n  useAddProtocol({\n    protocol: 'csv',\n    handler: CSVProtocolHandler\n  });\n  useEffect(() => {\n    if (!mapHook.map?.getSource('csv-source')) {\n      mapHook.map?.addSource('csv-source', {\n        type: 'geojson',\n        data: `csv://csv/restaurants.csv`\n      });\n    }\n    mapHook.map?.jumpTo({\n      center: [-74.914516, 38.935759],\n      zoom: 13\n    } as JumpToOptions);\n  }, [mapHook.map]);\n  return <>\n            <MlLayer layerId={'UseAddProtocolLayer'} options={{\n      type: 'circle',\n      source: 'csv-source',\n      paint: {\n        'circle-color': '#009EE0',\n        'circle-stroke-color': '#F0f0f0',\n        'circle-stroke-width': 2,\n        'circle-radius': 18\n      }\n    } as useLayerProps['options']} insertBeforeLayer={'waterway-name'} />\n\n            <BackgroundLayers />\n        </>;\n}",...CSVOrTSV.parameters?.docs?.source}}},CSVWithOptions.parameters={...CSVWithOptions.parameters,docs:{...CSVWithOptions.parameters?.docs,source:{originalSource:"() => {\n  const mapHook = useMap({\n    mapId: undefined\n  });\n\n  //  An optional encoded options object can be added after a '?' sign at the end of the url.\n  //  Handlers that support options are:\n  // -CSV/TSV Handler Options: https://github.com/mapbox/csv2geojson/blob/gh-pages/README.md\n\n  useAddProtocol({\n    protocol: 'csv',\n    handler: CSVProtocolHandler\n  });\n  useEffect(() => {\n    if (!mapHook.map?.getSource('csv-source')) {\n      const options = '?latfield=Axe-y&lonfield=Axe-x&delimiter=:';\n      mapHook.map?.addSource('csv-source', {\n        type: 'geojson',\n        data: `csv://csv/gemany_100_postcodes.csv${options}`\n      });\n    }\n    mapHook.map?.jumpTo({\n      center: [10.147049, 50.871231],\n      zoom: 6,\n      speed: 2\n    } as JumpToOptions);\n  }, [mapHook.map]);\n  return <>\n            <MlLayer layerId={'UseAddProtocolLayer'} options={{\n      type: 'circle',\n      source: 'csv-source',\n      paint: {\n        'circle-color': '#009EE0',\n        'circle-stroke-color': '#F0f0f0',\n        'circle-stroke-width': 2,\n        'circle-radius': 18\n      }\n    } as useLayerProps['options']} insertBeforeLayer={'waterway-name'} />\n\n            <BackgroundLayers />\n        </>;\n}",...CSVWithOptions.parameters?.docs?.source}}},OSM.parameters={...OSM.parameters,docs:{...OSM.parameters?.docs,source:{originalSource:"() => {\n  const mapHook = useMap({\n    mapId: undefined\n  });\n\n  //  An optional encoded options object can be added after a '?' sign at the end of the url.\n  //  Handlers that support options are:\n  // -OSM Handler Options: https://github.com/tibetty/osm2geojson-lite#osm2geojsonosm-opts\n\n  useAddProtocol({\n    protocol: 'osm',\n    handler: OSMProtocolHandler\n  });\n  useSource({\n    sourceId: 'osm-source',\n    source: {\n      type: 'geojson',\n      data: `osm://osm/palma.osm?completeFeature=true&allFeatures=false&renderTagged=false&excludeWay=false&suppressWay=false`\n    }\n  });\n  useEffect(() => {\n    if (!mapHook.map?.getSource('osm-source')) {\n      //mapHook.map?.addSource('osm-source', {\n      //\ttype: 'geojson',\n      //\tdata: `osm://osm/palma.osm${options}`,\n      //});\n    }\n    mapHook.map?.jumpTo({\n      center: [2.651811, 39.571309],\n      zoom: 16.5\n    } as JumpToOptions);\n  }, [mapHook.map]);\n  return <>\n            <MlLayer layerId={'UseAddProtocolLayer'} options={{\n      type: 'line',\n      source: 'osm-source',\n      paint: {\n        'line-color': '#9a00ff'\n      }\n    } as useLayerProps['options']} insertBeforeLayer={'waterway-name'} />\n\n            <BackgroundLayers />\n        </>;\n}",...OSM.parameters?.docs?.source}}},GPX.parameters={...GPX.parameters,docs:{...GPX.parameters?.docs,source:{originalSource:"() => {\n  const mapHook = useMap({\n    mapId: undefined\n  });\n  useAddProtocol({\n    protocol: 'gpx',\n    handler: XMLProtocolHandler\n  });\n  useEffect(() => {\n    if (!mapHook.map?.getSource('gpx-source')) {\n      mapHook.map?.addSource('gpx-source', {\n        type: 'geojson',\n        data: `gpx://gpx/santiago.gpx`\n      });\n    }\n    mapHook.map?.jumpTo({\n      center: [-5.100251, 42.887371],\n      zoom: 7\n    } as JumpToOptions);\n  }, [mapHook.map]);\n  return <>\n            <MlLayer layerId={'UseAddProtocolLayer'} options={{\n      type: 'circle',\n      source: 'gpx-source',\n      paint: {\n        'circle-color': '#45ff33',\n        'circle-stroke-color': '#259913',\n        'circle-stroke-width': 1,\n        'circle-radius': 2\n      }\n    } as useLayerProps['options']} insertBeforeLayer={'waterway-name'} />\n\n            <BackgroundLayers />\n        </>;\n}",...GPX.parameters?.docs?.source}}},KML.parameters={...KML.parameters,docs:{...KML.parameters?.docs,source:{originalSource:"() => {\n  const mapHook = useMap({\n    mapId: undefined\n  });\n  useAddProtocol({\n    protocol: 'kml',\n    handler: XMLProtocolHandler\n  });\n  useEffect(() => {\n    if (!mapHook.map?.getSource('kml-source')) {\n      mapHook.map?.addSource('kml-source', {\n        type: 'geojson',\n        data: `kml://kml/cape_may.kml`\n      });\n    }\n    mapHook.map?.jumpTo({\n      center: [-74.82832, 39.093526],\n      zoom: 9\n    } as JumpToOptions);\n  }, [mapHook.map]);\n  return <>\n            <MlLayer layerId={'UseAddProtocolLayer'} options={{\n      type: 'circle',\n      source: 'kml-source',\n      paint: {\n        'circle-color': '#ff4533',\n        'circle-stroke-color': '#992513',\n        'circle-stroke-width': 1,\n        'circle-radius': 2\n      }\n    } as useLayerProps['options']} insertBeforeLayer={'waterway-name'} />\n\n            <BackgroundLayers />\n        </>;\n}",...KML.parameters?.docs?.source}}},TCX.parameters={...TCX.parameters,docs:{...TCX.parameters?.docs,source:{originalSource:"() => {\n  const mapHook = useMap({\n    mapId: undefined\n  });\n  useAddProtocol({\n    protocol: 'tcx',\n    handler: XMLProtocolHandler\n  });\n  useEffect(() => {\n    if (!mapHook.map?.getSource('tcx-source')) {\n      mapHook.map?.addSource('tcx-source', {\n        type: 'geojson',\n        data: `tcx://tcx/example.tcx`\n      });\n    }\n    mapHook.map?.jumpTo({\n      center: [32.711545, 34.844962],\n      zoom: 9\n    } as JumpToOptions);\n  }, [mapHook.map]);\n  return <>\n            <MlLayer layerId={'UseAddProtocolLayer'} options={{\n      type: 'circle',\n      source: 'tcx-source',\n      paint: {\n        'circle-color': '#ff45fa',\n        'circle-stroke-color': '#992578',\n        'circle-stroke-width': 1,\n        'circle-radius': 2\n      }\n    } as useLayerProps['options']} insertBeforeLayer={'waterway-name'} />\n\n            <BackgroundLayers />\n        </>;\n}",...TCX.parameters?.docs?.source}}},Topojson.parameters={...Topojson.parameters,docs:{...Topojson.parameters?.docs,source:{originalSource:"() => {\n  const mapHook = useMap({\n    mapId: undefined\n  });\n  useAddProtocol({\n    protocol: 'topojson',\n    handler: TopojsonProtocolHandler\n  });\n  useEffect(() => {\n    if (!mapHook.map?.getSource('topojson-source')) {\n      mapHook.map?.addSource('topojson-source', {\n        type: 'geojson',\n        data: `topojson://topojson/usa.topojson`\n      });\n    }\n    mapHook.map?.jumpTo({\n      center: [-99.110122, 39.827183],\n      zoom: 4\n    } as JumpToOptions);\n  }, [mapHook.map]);\n  return <>\n            <MlLayer layerId={'UseAddProtocolLayer'} options={{\n      type: 'line',\n      source: 'topojson-source',\n      paint: {\n        'line-color': ['match', ['get', 'fromObject'], 'land', '#111111', 'states', '#009EE0', 'counties', '#747577', 'white' // otherwise\n        ],\n        'line-width': ['match', ['get', 'fromObject'], 'land', 3, 'states', 2, 'counties', 1, 1 // otherwise\n        ]\n      }\n    } as useLayerProps['options']} insertBeforeLayer={'waterway-name'} />\n\n            <BackgroundLayers />\n        </>;\n}",...Topojson.parameters?.docs?.source}}},CatalogueDemo.parameters={...CatalogueDemo.parameters,docs:{...CatalogueDemo.parameters?.docs,source:{originalSource:"() => {\n  const mapHook = useMap({\n    mapId: undefined\n  });\n  const [openSidebar, setOpenSidebar] = useState(true);\n  const layerContext = useContext(LayerContext);\n  const [currentDemo, setCurrentDemo] = useState<string>('csv');\n  const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);\n  const open = Boolean(anchorEl);\n  const props: TemplateProps = (currentProps as {\n    [key: string]: any;\n  })[currentDemo];\n  const optionsURL = '?' + new URLSearchParams(props.options as string).toString();\n  useAddProtocol({\n    protocol: props.protocol,\n    handler: props.handler\n  });\n  useEffect(() => {\n    layerContext.updateStyle(bright as unknown as StyleSpecification);\n    layerContext.setLayers([props.protocol === 'mbtiles' ? {\n      type: 'vt',\n      name: 'useAddProtocolLayer',\n      config: {\n        layerId: 'useAddProtocolLayer',\n        url: props.protocol + '://' + props.filePath + '/{z}/{x}/{y}',\n        layers: props.layers,\n        insertBeforeLayer: props.insertBeforeLayer,\n        sourceOptions: props.sourceOptions\n      } as MlVectorTileLayerProps\n    } : {\n      type: 'geojson',\n      name: 'useAddProtocolLayer',\n      config: {\n        layerId: 'useAddProtocolLayer',\n        type: props.type || 'line',\n        options: {\n          source: props.sourceId\n        },\n        paint: props.paint\n      } as MlGeoJsonLayerProps\n    }]);\n  }, [currentDemo]);\n  useEffect(() => {\n    if (!mapHook.map?.getSource(props.sourceId) && props.protocol !== 'mbtiles') {\n      mapHook.map?.addSource(props.sourceId, {\n        type: 'geojson',\n        data: props.protocol + '://' + props.filePath + optionsURL\n      });\n    }\n    if (props.flyTo) {\n      mapHook.map?.flyTo(props.flyTo as FlyToOptions);\n    }\n  }, [mapHook.map, currentDemo]);\n  return <>\n            <TopToolbar buttons={<>\n                        <Button variant={openSidebar ? 'contained' : 'outlined'} onClick={() => setOpenSidebar(!openSidebar)} sx={{\n        marginRight: {\n          xs: '0px',\n          sm: '10px'\n        }\n      }}>\n                            Sidebar\n                        </Button>\n\n                        <Button id=\"basic-button\" variant=\"contained\" aria-controls={open ? 'basic-menu' : undefined} aria-haspopup=\"true\" aria-expanded={open ? 'true' : undefined} onClick={(event: React.MouseEvent<HTMLButtonElement>) => {\n        setAnchorEl(event.currentTarget);\n      }}>\n                            Example Configs\n                        </Button>\n                        <Menu id=\"basic-menu\" anchorEl={anchorEl} open={open} onClose={() => setAnchorEl(null)} MenuListProps={{\n        'aria-labelledby': 'basic-button'\n      }}>\n                            {Object.keys(currentProps).map(el => <MenuItem onClick={() => setCurrentDemo(el)} key={el} selected={el === currentDemo}>\n                                    {el}\n                                </MenuItem>)}\n                        </Menu>\n                    </>} />\n\n            <Sidebar open={openSidebar} setOpen={setOpenSidebar} name={props.protocol.toUpperCase() + ' demo'}>\n                <Tooltip title={'add a new' + props.protocol + ' to the map'}>\n                    <AddLayerButton onComplete={config => layerContext.setLayers(current => [...current, config])} layerTypes={[props.protocol]} />\n                </Tooltip>\n\n                <Box sx={{\n        height: '35%'\n      }}>\n                    <Typography variant=\"h6\">{'Layers'}</Typography>\n                    <LayerList>\n                        <LayerListItemFactory layers={layerContext.layers} setLayers={layerContext.setLayers} insertBeforeLayer=\"useAddProtocolLayer\" fitBoundsOptions={{\n            padding: {\n              top: 50,\n              bottom: 50,\n              left: 25,\n              right: 25\n            }\n          }} />\n                    </LayerList>\n                </Box>\n\n                <DemoDescriptions json={protocolDescriptions} section={props.protocol} title={'About this demo: '} />\n            </Sidebar>\n        </>;\n}",...CatalogueDemo.parameters?.docs?.source}}}},"?5041":()=>{},"?8893":()=>{}}]);