[{"/home/tweber/projects/react_map_components/documentation_trial/react-map-components-maplibre/src/stories/MapLibreMap.stories.js":"1","/home/tweber/projects/react_map_components/documentation_trial/react-map-components-maplibre/src/stories/CreatePdfButton.stories.js":"2","/home/tweber/projects/react_map_components/documentation_trial/react-map-components-maplibre/src/stories/MapDrawTools.stories.js":"3","/home/tweber/projects/react_map_components/documentation_trial/react-map-components-maplibre/src/components/MapDrawTools/MapDrawTools.js":"4","/home/tweber/projects/react_map_components/documentation_trial/react-map-components-maplibre/src/components/MapDrawTools/custom-select-mode.js":"5","/home/tweber/projects/react_map_components/documentation_trial/react-map-components-maplibre/src/components/MapDrawTools/custom-polygon-mode.js":"6","/home/tweber/projects/react_map_components/documentation_trial/react-map-components-maplibre/src/components/MapDrawTools/lib/move_features.js":"7","/home/tweber/projects/react_map_components/documentation_trial/react-map-components-maplibre/src/components/MapDrawTools/custom-direct-select-mode.js":"8","/home/tweber/projects/react_map_components/documentation_trial/react-map-components-maplibre/src/components/MapDrawTools/lib/utils.js":"9","/home/tweber/projects/map-components/map-components-maplibre/src/components/MapLibreMap/MapLibreMap.stories.js":"10","/home/tweber/projects/map-components/map-components-maplibre/src/components/MlCreatePdfButton/MlCreatePdfButton.js":"11","/home/tweber/projects/map-components/map-components-maplibre/src/components/MlMapDrawTools/custom-direct-select-mode.js":"12","/home/tweber/projects/map-components/map-components-maplibre/src/components/MlMapDrawTools/lib/utils.js":"13","/home/tweber/projects/map-components/map-components-maplibre/src/components/MlCreatePdfButton/MlCreatePdfButton.stories.js":"14","/home/tweber/projects/map-components/map-components-maplibre/src/components/MlMapDrawTools/MlMapDrawTools.stories.js":"15","/home/tweber/projects/map-components/map-components-maplibre/src/components/MlCreatePdfButton/lib/createPdf.js":"16","/home/tweber/projects/map-components/map-components-maplibre/src/components/MlMapDrawTools/lib/move_features.js":"17","/home/tweber/projects/map-components/map-components-maplibre/src/components/MlCreatePdfButton/lib/nominatimMap.js":"18","/home/tweber/projects/map-components/map-components-maplibre/src/components/MapLibreMap/MapLibreMap.js":"19","/home/tweber/projects/map-components/map-components-maplibre/src/components/MlMapDrawTools/MlMapDrawTools.js":"20","/home/tweber/projects/map-components/map-components-maplibre/src/components/index.js":"21","/home/tweber/projects/map-components/map-components-maplibre/src/components/MlMapDrawTools/custom-polygon-mode.js":"22","/home/tweber/projects/map-components/map-components-maplibre/src/components/MlMapDrawTools/custom-select-mode.js":"23"},{"size":768,"mtime":1611920503233,"results":"24","hashOfConfig":"25"},{"size":989,"mtime":1611918558025,"results":"26","hashOfConfig":"25"},{"size":935,"mtime":1611924576711,"results":"27","hashOfConfig":"25"},{"size":6453,"mtime":1612349094511,"results":"28","hashOfConfig":"25"},{"size":12644,"mtime":1612349134588,"results":"29","hashOfConfig":"25"},{"size":5608,"mtime":1612349107639,"results":"30","hashOfConfig":"25"},{"size":1584,"mtime":1612283833217,"results":"31","hashOfConfig":"25"},{"size":9407,"mtime":1612349177496,"results":"32","hashOfConfig":"25"},{"size":1568,"mtime":1612349746161,"results":"33","hashOfConfig":"25"},{"size":803,"mtime":1614942160550,"results":"34","hashOfConfig":"35"},{"size":772,"mtime":1614943703229,"results":"36","hashOfConfig":"35"},{"size":9407,"mtime":1614849573914,"results":"37","hashOfConfig":"35"},{"size":1568,"mtime":1614849573914,"results":"38","hashOfConfig":"35"},{"size":893,"mtime":1614942194125,"results":"39","hashOfConfig":"35"},{"size":817,"mtime":1614942968330,"results":"40","hashOfConfig":"35"},{"size":9151,"mtime":1614875101322,"results":"41","hashOfConfig":"35"},{"size":1584,"mtime":1614849573914,"results":"42","hashOfConfig":"35"},{"size":1092,"mtime":1614875159118,"results":"43","hashOfConfig":"35"},{"size":1718,"mtime":1614940765365,"results":"44","hashOfConfig":"35"},{"size":6459,"mtime":1614875658484,"results":"45","hashOfConfig":"35"},{"size":246,"mtime":1614874240593,"results":"46","hashOfConfig":"35"},{"size":5608,"mtime":1614849573914,"results":"47","hashOfConfig":"35"},{"size":12644,"mtime":1614849573914,"results":"48","hashOfConfig":"35"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"52"},"b5n0xj",{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"56"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"60"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"77"},"ghxvzr",{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"77"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"77"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"77"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"77"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"77"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"77"},"/home/tweber/projects/react_map_components/documentation_trial/react-map-components-maplibre/src/stories/MapLibreMap.stories.js",["110","111"],"import React from \"react\";\n\nimport { MapLibreMap, CreatePdfButton } from \"react-map-components-core\";\nimport { MapComponentsProvider } from \"react-map-components-core\";\nimport \"../App.css\";\n\nexport default {\n  title: \"Core/MapLibreMap\",\n  component: MapLibreMap,\n  argTypes: {\n    options: {\n      control: {\n        type: \"object\",\n      },\n    },\n  },\n};\n\nconst Template = (args) => (\n  <MapComponentsProvider>\n    <MapLibreMap options={args.options} />\n  </MapComponentsProvider>\n);\n\nexport const ExampleConfig = Template.bind({});\nExampleConfig.args = {\n  options: {\n    style: \"https://wms.wheregroup.com/tileserver/style/osm-bright.json\",\n    center: [8.607, 53.1409349],\n    maxBounds: [\n      [1.40625, 43.452919],\n      [17.797852, 55.973798],\n    ],\n  },\n};\n",["112","113"],"/home/tweber/projects/react_map_components/documentation_trial/react-map-components-maplibre/src/stories/CreatePdfButton.stories.js",["114"],"import React from \"react\";\n\nimport { MapLibreMap, CreatePdfButton } from \"react-map-components-core\";\nimport { MapComponentsProvider } from \"react-map-components-core\";\nimport \"../App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nexport default {\n  title: \"MapComponents/CreatePdfButton\",\n  component: CreatePdfButton,\n  argTypes: {\n    colora: {\n      control: {\n        type: \"color\",\n      },\n    },\n    options: {\n      control: {\n        type: \"object\",\n      },\n    },\n  },\n};\n\nconst Template = (args) => (\n  <MapComponentsProvider>\n    <div className=\"navbar\">\n      <CreatePdfButton />\n    </div>\n    <MapLibreMap options={args.options} />\n  </MapComponentsProvider>\n);\n\nexport const ExampleConfig = Template.bind({});\nExampleConfig.args = {\n  colora: \"#ffffff\",\n  options: {\n    style: \"https://wms.wheregroup.com/tileserver/style/osm-bright.json\",\n    center: [8.607, 53.1409349],\n    maxBounds: [\n      [1.40625, 43.452919],\n      [17.797852, 55.973798],\n    ],\n  },\n};\n",["115","116"],"/home/tweber/projects/react_map_components/documentation_trial/react-map-components-maplibre/src/stories/MapDrawTools.stories.js",["117"],"import React from \"react\";\n\nimport { MapLibreMap } from \"react-map-components-core\";\nimport { MapComponentsProvider } from \"react-map-components-core\";\nimport MapDrawTools from \"../components/MapDrawTools/MapDrawTools\";\n\nimport Nav from \"react-bootstrap/Nav\";\n\nimport \"../App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nexport default {\n  title: \"MapComponents/MapDrawTools\",\n  component: MapDrawTools,\n  argTypes: {},\n};\n\nconst Template = (args) => (\n  <MapComponentsProvider>\n    <Nav as=\"ul\" className=\"navbar\">\n      <MapDrawTools />\n    </Nav>\n    <MapLibreMap options={args.options} />\n  </MapComponentsProvider>\n);\n\nexport const ExampleConfig = Template.bind({});\nExampleConfig.args = {\n  colora: \"#ffffff\",\n  options: {\n    style: \"https://wms.wheregroup.com/tileserver/style/osm-bright.json\",\n    center: [8.607, 53.1409349],\n    maxBounds: [\n      [1.40625, 43.452919],\n      [17.797852, 55.973798],\n    ],\n  },\n};\n",["118","119"],"/home/tweber/projects/react_map_components/documentation_trial/react-map-components-maplibre/src/components/MapDrawTools/MapDrawTools.js",["120","121"],"import React, { useState, useEffect, useContext, useRef } from \"react\";\nimport \"./MapDrawTools.css\";\n\nimport \"@mapbox/mapbox-gl-draw/dist/mapbox-gl-draw.css\";\nimport MapboxDraw from \"@mapbox/mapbox-gl-draw\";\nimport CustomPolygonMode from \"./custom-polygon-mode\";\nimport CustomSelectMode from \"./custom-select-mode\";\nimport CustomDirectSelectMode from \"./custom-direct-select-mode\";\n\nimport { MapContext } from \"react-map-components-core\";\n\nimport Nav from \"react-bootstrap/Nav\";\n//import Form from \"react-bootstrap/Form\";\nimport Button from \"react-bootstrap/Button\";\nimport ListGroup from \"react-bootstrap/ListGroup\";\n\nfunction MapDrawTools() {\n  const draw = useRef(null);\n  const mapContext = useContext(MapContext);\n\n  const [firstLoad, setFirstLoad] = useState(true);\n  const [mouseUpTrigger, setMouseUpTrigger] = useState(false);\n\n  //const [groupCloseVertices, setGroupCloseVertices] = useState(false);\n\n  const [storedMapFeatures, setStoredMapFeatures] = useState(null);\n\n  const [drawnFeatures, setDrawnFeatures] = useState([]);\n  const [drawModeActive, setDrawModeActive] = useState(false);\n  const [currentDrawMode, setCurrentDrawMode] = useState(\"custom_select\");\n  const [selectedFeatureId, setSelectedFeatureId] = useState(\"\");\n\n  useEffect(() => {\n    // retrieve stored features from localstorage\n    let storedMapFeaturesStr = localStorage.getItem(\"storedMapFeatures\");\n\n    if (storedMapFeaturesStr) {\n      let storedMapFeaturesObj = JSON.parse(storedMapFeaturesStr);\n      setStoredMapFeatures(storedMapFeaturesObj);\n      setDrawnFeatures(storedMapFeaturesObj.features);\n    }\n  }, []);\n\n  useEffect(() => {\n    if (mapContext.map && firstLoad) {\n      setFirstLoad(false);\n      if (\n        mapContext.map.getSource(\"mapbox-gl-draw-cold\") &&\n        window.MapboxDraw &&\n        typeof window.MapboxDraw.remove !== \"undefined\"\n      ) {\n        // remove old Mapbox-gl-Draw from Mapbox instance when hot-reloading this component during development\n        window.MapboxDraw.remove();\n      }\n      window.MapLibreObj = mapContext.map;\n\n      draw.current = new MapboxDraw({\n        displayControlsDefault: false,\n        defaultMode: \"custom_select\",\n        modes: Object.assign(\n          {\n            custom_polygon: CustomPolygonMode,\n            custom_select: CustomSelectMode,\n            custom_direct_select: CustomDirectSelectMode,\n          },\n          MapboxDraw.modes\n        ),\n      });\n\n      mapContext.map.on(\"draw.modechange\", (e) => {\n        console.log(\"modechange\");\n        setCurrentDrawMode(e.mode);\n      });\n\n      window.MapboxDraw = draw.current;\n\n      // sadly there is no featureAdd event available in MapLibre\n      mapContext.map.addControl(draw.current, \"top-left\");\n\n      mapContext.map.on(\"mouseup\", () => {\n        setMouseUpTrigger(Math.random());\n      });\n\n      if (storedMapFeatures) {\n        draw.current.set(storedMapFeatures);\n      }\n    }\n  }, [mapContext.map, drawnFeatures, firstLoad]);\n\n  useEffect(() => {\n    if (draw.current) {\n      // update drawnFeatures state object\n      let currentFeatureCollection = draw.current.getAll();\n      if (\n        currentDrawMode === \"custom_polygon\" ||\n        currentDrawMode === \"custom_select\"\n      ) {\n        setDrawnFeatures([...currentFeatureCollection.features]);\n\n        localStorage.setItem(\n          \"storedMapFeatures\",\n          JSON.stringify(currentFeatureCollection)\n        );\n      }\n\n      // update selected feature\n      let selectedFeature = draw.current.getSelected();\n      for (var i = 0; i < drawnFeatures.length; i++) {\n        if (\n          typeof selectedFeature.features[0] !== \"undefined\" &&\n          selectedFeature.features[0].id === drawnFeatures[i].id\n        ) {\n          setSelectedFeatureId(selectedFeature.features[0].id);\n        }\n      }\n    }\n  }, [mouseUpTrigger]);\n\n  useEffect(() => {\n    if (draw.current) {\n      switch (currentDrawMode) {\n        case \"custom_polygon\":\n          draw.current.changeMode(\"custom_polygon\");\n          break;\n        case \"custom_select\":\n        default:\n          draw.current.changeMode(\"custom_select\");\n          break;\n      }\n    }\n  }, [currentDrawMode]);\n\n  return (\n    <>\n      <Nav.Item as=\"li\" key={1}>\n        <Button\n          variant={drawModeActive ? \"warning\" : \"light\"}\n          onClick={() => setDrawModeActive(!drawModeActive)}\n        >\n          Draw\n        </Button>\n      </Nav.Item>\n      {drawModeActive && (\n        <>\n          <Nav.Item as=\"li\" key={2}>\n            <Button\n              variant={\n                currentDrawMode === \"custom_select\" ||\n                currentDrawMode === \"custom_direct_select\"\n                  ? \"warning\"\n                  : \"light\"\n              }\n              onClick={() => setCurrentDrawMode(\"custom_select\")}\n            >\n              Select\n            </Button>\n          </Nav.Item>\n          <Nav.Item as=\"li\" key={4}>\n            <Button\n              variant=\"light\"\n              onClick={() => {\n                localStorage.setItem(\"storedMapFeatures\", \"\");\n                setStoredMapFeatures(null);\n                setDrawnFeatures([]);\n                draw.current.deleteAll();\n              }}\n            >\n              Clear\n            </Button>\n          </Nav.Item>\n          <Nav.Item as=\"li\" key={3}>\n            <Button\n              variant={\n                currentDrawMode === \"custom_polygon\" ? \"warning\" : \"light\"\n              }\n              onClick={() =>\n                setCurrentDrawMode(\n                  currentDrawMode !== \"custom_polygon\"\n                    ? \"custom_polygon\"\n                    : \"custom_select\"\n                )\n              }\n            >\n              Polygon\n            </Button>\n          </Nav.Item>\n          <div\n            style={{\n              position: \"absolute\",\n              left: \"17px\",\n              top: \"60px\",\n              backgroundColor: \"#f8f9fa\",\n              borderRadius: \"4px\",\n              width: \"150px\",\n              height: \"200px\",\n            }}\n          >\n            <ListGroup>\n              {drawnFeatures.map((feature, id) => (\n                <ListGroup.Item\n                  key={id}\n                  active={selectedFeatureId === feature.id}\n                >\n                  {feature.type} {id}\n                </ListGroup.Item>\n              ))}\n            </ListGroup>\n          </div>\n        </>\n      )}\n    </>\n  );\n}\n\nexport default MapDrawTools;\n","/home/tweber/projects/react_map_components/documentation_trial/react-map-components-maplibre/src/components/MapDrawTools/custom-select-mode.js",["122"],"/home/tweber/projects/react_map_components/documentation_trial/react-map-components-maplibre/src/components/MapDrawTools/custom-polygon-mode.js",[],"/home/tweber/projects/react_map_components/documentation_trial/react-map-components-maplibre/src/components/MapDrawTools/lib/move_features.js",[],"/home/tweber/projects/react_map_components/documentation_trial/react-map-components-maplibre/src/components/MapDrawTools/custom-direct-select-mode.js",[],"/home/tweber/projects/react_map_components/documentation_trial/react-map-components-maplibre/src/components/MapDrawTools/lib/utils.js",[],"/home/tweber/projects/map-components/map-components-maplibre/src/components/MapLibreMap/MapLibreMap.stories.js",["123"],"import React from \"react\";\n\nimport MapLibreMap from \"./MapLibreMap\";\nimport { MapComponentsProvider } from \"react-map-components-core\";\nimport \"../../App.css\";\n\nexport default {\n  title: \"Core/MapLibreMap\",\n  component: MapLibreMap,\n  argTypes: {\n    options: {\n      control: {\n        type: \"object\",\n      },\n    },\n  },\n};\n\nconst Template = (args) => (\n  <MapComponentsProvider>\n    <MapLibreMap options={args.options} />\n  </MapComponentsProvider>\n);\n\nexport const ExampleConfig = Template.bind({});\nExampleConfig.args = {\n  options: {\n    style: \"https://wms.wheregroup.com/tileserver/style/osm-bright.json\",\n    center: [8.607, 53.1409349],\n    maxBounds: [\n      [1.40625, 43.452919],\n      [17.797852, 55.973798],\n    ],\n  },\n};\nExampleConfig.parameters = {\n  storyshots: { disable: true },\n};\n",["124","125"],"/home/tweber/projects/map-components/map-components-maplibre/src/components/MlCreatePdfButton/MlCreatePdfButton.js",[],"/home/tweber/projects/map-components/map-components-maplibre/src/components/MlMapDrawTools/custom-direct-select-mode.js",[],"/home/tweber/projects/map-components/map-components-maplibre/src/components/MlMapDrawTools/lib/utils.js",[],"/home/tweber/projects/map-components/map-components-maplibre/src/components/MlCreatePdfButton/MlCreatePdfButton.stories.js",["126"],"import React from \"react\";\n\nimport MlCreatePdfButton from \"./MlCreatePdfButton\";\nimport \"../../App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nexport default {\n  title: \"MapComponents/MlCreatePdfButton\",\n  component: MlCreatePdfButton,\n  argTypes: {\n    options: {\n      control: {\n        type: \"object\",\n      },\n    },\n  },\n};\n\nconst Template = (args) => (\n  <>\n    <div className=\"navbar\">\n      <MlCreatePdfButton />\n    </div>\n  </>\n);\n\n// <MapLibreMap options={args.options} />\nexport const ExampleConfig = Template.bind({});\nExampleConfig.parameters = {\n  storyshots: { disable: true },\n};\n//ExampleConfig.args = {\n//  //  options: {\n//  //    style: \"https://wms.wheregroup.com/tileserver/style/osm-bright.json\",\n//  //    center: [8.607, 53.1409349],\n//  //    maxBounds: [\n//  //      [1.40625, 43.452919],\n//  //      [17.797852, 55.973798],\n//  //    ],\n//  //  },\n//};\n","/home/tweber/projects/map-components/map-components-maplibre/src/components/MlMapDrawTools/MlMapDrawTools.stories.js",["127"],"import React from \"react\";\n\nimport MlMapDrawTools from \"./MlMapDrawTools\";\n\nimport \"../../App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nexport default {\n  title: \"MapComponents/MlMapDrawTools\",\n  component: MlMapDrawTools,\n  argTypes: {},\n  storyshots: { disable: true },\n};\n\nconst Template = (args) => {\n  console.log(MlMapDrawTools);\n  return (\n    <div className=\"navbar\">\n      <MlMapDrawTools />\n    </div>\n  );\n};\n\nexport const ExampleConfig = Template.bind({});\nExampleConfig.storyshots = { disable: true };\nExampleConfig.args = {\n  //  colora: \"#ffffff\",\n  //  options: {\n  //    style: \"https://wms.wheregroup.com/tileserver/style/osm-bright.json\",\n  //    center: [8.607, 53.1409349],\n  //    maxBounds: [\n  //      [1.40625, 43.452919],\n  //      [17.797852, 55.973798],\n  //    ],\n  //  },\n};\n","/home/tweber/projects/map-components/map-components-maplibre/src/components/MlCreatePdfButton/lib/createPdf.js",[],"/home/tweber/projects/map-components/map-components-maplibre/src/components/MlMapDrawTools/lib/move_features.js",[],"/home/tweber/projects/map-components/map-components-maplibre/src/components/MlCreatePdfButton/lib/nominatimMap.js",["128","129"],"const nmMap = {\n  street: [\n    \"footway\",\n    \"street\",\n    \"road\",\n    \"street_name\",\n    \"residential\",\n    \"path\",\n    \"pedestrian\",\n    \"road_reference\",\n    \"road_reference_intl\",\n    \"square\",\n    \"place\",\n  ],\n  number: [\"house_number\", \"street_number\"],\n  place: [\n    \"city\",\n    \"village\",\n    \"hamlet\",\n    \"locality\",\n    \"croft\",\n    \"neighbourhood\",\n    \"suburb\",\n    \"city_district\",\n    \"district\",\n    \"quarter\",\n    \"borough\",\n    \"city_block\",\n    \"residential\",\n    \"commercial\",\n    \"industrial\",\n    \"houses\",\n    \"subdivision\",\n    \"allotments\",\n    \"postal_city\",\n    \"town\",\n    \"municipality\",\n    \"local_administrative_area\",\n  ],\n  zip: [\"postcode\", \"partial_postcode\"],\n  state: [\"state\", \"province\", \"state_code\"],\n};\n\nconst nmConverter = (nmAddress) => {\n  const addressArr = [];\n  for (const [key, value] of Object.entries(nmMap)) {\n    value.some((element) => {\n      if (nmAddress.hasOwnProperty(element)) {\n        addressArr.push(nmAddress[element]);\n        return true;\n      }\n    });\n  }\n  return addressArr.join(\", \");\n};\nexport default nmConverter;\n","/home/tweber/projects/map-components/map-components-maplibre/src/components/MapLibreMap/MapLibreMap.js",["130"],"import React, { useRef, useEffect, useContext } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { MapContext } from \"react-map-components-core\";\n\nimport maplibregl from \"maplibre-gl\";\nimport \"maplibre-gl/dist/maplibre-gl.css\";\n\n/**\n * The MapLibreMap component will create the MapLibre-gl instance and set the reference at MapContext.map after the MapLibre-gl load event has fired. That way (since the map refence is created using the useState hook) you can use the react useEffect hook in depending components to access the MapLibre-gl instance like ```useEffect(() => { \\/** code *\\/ }, [mapContext.map])``` and be sure the code is executed once the MapLibre-gl instance has fired the load event.\n *\n * MapLibreMap returns the html node that will be used by MapLibre-gl to render the map.\n * This Component must be kept unaware of any related components that interact with the MapLibre-gl instance.\n */\nconst MapLibreMap = (props) => {\n  const map = useRef(null);\n  const mapContainer = useRef(null);\n\n  const mapContext = useContext(MapContext);\n\n  const mapOptions = props.options;\n\n  useEffect(() => {\n    mapContext.setLoading(true);\n\n    // TODO: adjust defaults\n    let defaultOptions = {\n      lng: 8.607,\n      lat: 53.1409349,\n      zoom: 10,\n      container: mapContainer.current,\n    };\n\n    map.current = new maplibregl.Map({ ...defaultOptions, ...mapOptions });\n\n    map.current.on(\"load\", () => {\n      mapContext.setMap(map.current);\n    });\n\n    window.map = map.current;\n\n    return () => {\n      map.current.remove();\n    };\n  }, []);\n\n  return <div ref={mapContainer} className=\"mapContainer\" />;\n};\n\nMapLibreMap.propTypes = {\n  options: PropTypes.object,\n};\n\nexport default MapLibreMap;\n","/home/tweber/projects/map-components/map-components-maplibre/src/components/MlMapDrawTools/MlMapDrawTools.js",["131","132"],"import React, { useState, useEffect, useContext, useRef } from \"react\";\nimport \"./MlMapDrawTools.css\";\n\nimport \"@mapbox/mapbox-gl-draw/dist/mapbox-gl-draw.css\";\nimport MapboxDraw from \"@mapbox/mapbox-gl-draw\";\nimport CustomPolygonMode from \"./custom-polygon-mode\";\nimport CustomSelectMode from \"./custom-select-mode\";\nimport CustomDirectSelectMode from \"./custom-direct-select-mode\";\n\nimport { MapContext } from \"react-map-components-core\";\n\nimport Nav from \"react-bootstrap/Nav\";\n//import Form from \"react-bootstrap/Form\";\nimport Button from \"react-bootstrap/Button\";\nimport ListGroup from \"react-bootstrap/ListGroup\";\n\nfunction MlMapDrawTools() {\n  const draw = useRef(null);\n  const mapContext = useContext(MapContext);\n\n  const [firstLoad, setFirstLoad] = useState(true);\n  const [mouseUpTrigger, setMouseUpTrigger] = useState(false);\n\n  //const [groupCloseVertices, setGroupCloseVertices] = useState(false);\n\n  const [storedMapFeatures, setStoredMapFeatures] = useState(null);\n\n  const [drawnFeatures, setDrawnFeatures] = useState([]);\n  const [drawModeActive, setDrawModeActive] = useState(false);\n  const [currentDrawMode, setCurrentDrawMode] = useState(\"custom_select\");\n  const [selectedFeatureId, setSelectedFeatureId] = useState(\"\");\n\n  useEffect(() => {\n    // retrieve stored features from localstorage\n    let storedMapFeaturesStr = localStorage.getItem(\"storedMapFeatures\");\n\n    if (storedMapFeaturesStr) {\n      let storedMapFeaturesObj = JSON.parse(storedMapFeaturesStr);\n      setStoredMapFeatures(storedMapFeaturesObj);\n      setDrawnFeatures(storedMapFeaturesObj.features);\n    }\n  }, []);\n\n  useEffect(() => {\n    if (mapContext.map && firstLoad) {\n      setFirstLoad(false);\n      if (\n        mapContext.map.getSource(\"mapbox-gl-draw-cold\") &&\n        window.MapboxDraw &&\n        typeof window.MapboxDraw.remove !== \"undefined\"\n      ) {\n        // remove old Mapbox-gl-Draw from Mapbox instance when hot-reloading this component during development\n        window.MapboxDraw.remove();\n      }\n      window.MapLibreObj = mapContext.map;\n\n      draw.current = new MapboxDraw({\n        displayControlsDefault: false,\n        defaultMode: \"custom_select\",\n        modes: Object.assign(\n          {\n            custom_polygon: CustomPolygonMode,\n            custom_select: CustomSelectMode,\n            custom_direct_select: CustomDirectSelectMode,\n          },\n          MapboxDraw.modes\n        ),\n      });\n\n      mapContext.map.on(\"draw.modechange\", (e) => {\n        console.log(\"modechange\");\n        setCurrentDrawMode(e.mode);\n      });\n\n      window.MapboxDraw = draw.current;\n\n      // sadly there is no featureAdd event available in MapLibre\n      mapContext.map.addControl(draw.current, \"top-left\");\n\n      mapContext.map.on(\"mouseup\", () => {\n        setMouseUpTrigger(Math.random());\n      });\n\n      if (storedMapFeatures) {\n        draw.current.set(storedMapFeatures);\n      }\n    }\n  }, [mapContext.map, drawnFeatures, firstLoad]);\n\n  useEffect(() => {\n    if (draw.current) {\n      // update drawnFeatures state object\n      let currentFeatureCollection = draw.current.getAll();\n      if (\n        currentDrawMode === \"custom_polygon\" ||\n        currentDrawMode === \"custom_select\"\n      ) {\n        setDrawnFeatures([...currentFeatureCollection.features]);\n\n        localStorage.setItem(\n          \"storedMapFeatures\",\n          JSON.stringify(currentFeatureCollection)\n        );\n      }\n\n      // update selected feature\n      let selectedFeature = draw.current.getSelected();\n      for (var i = 0; i < drawnFeatures.length; i++) {\n        if (\n          typeof selectedFeature.features[0] !== \"undefined\" &&\n          selectedFeature.features[0].id === drawnFeatures[i].id\n        ) {\n          setSelectedFeatureId(selectedFeature.features[0].id);\n        }\n      }\n    }\n  }, [mouseUpTrigger]);\n\n  useEffect(() => {\n    if (draw.current) {\n      switch (currentDrawMode) {\n        case \"custom_polygon\":\n          draw.current.changeMode(\"custom_polygon\");\n          break;\n        case \"custom_select\":\n        default:\n          draw.current.changeMode(\"custom_select\");\n          break;\n      }\n    }\n  }, [currentDrawMode]);\n\n  return (\n    <>\n      <Nav.Item as=\"li\" key={1}>\n        <Button\n          variant={drawModeActive ? \"warning\" : \"light\"}\n          onClick={() => setDrawModeActive(!drawModeActive)}\n        >\n          Draw\n        </Button>\n      </Nav.Item>\n      {drawModeActive && (\n        <>\n          <Nav.Item as=\"li\" key={2}>\n            <Button\n              variant={\n                currentDrawMode === \"custom_select\" ||\n                currentDrawMode === \"custom_direct_select\"\n                  ? \"warning\"\n                  : \"light\"\n              }\n              onClick={() => setCurrentDrawMode(\"custom_select\")}\n            >\n              Select\n            </Button>\n          </Nav.Item>\n          <Nav.Item as=\"li\" key={4}>\n            <Button\n              variant=\"light\"\n              onClick={() => {\n                localStorage.setItem(\"storedMapFeatures\", \"\");\n                setStoredMapFeatures(null);\n                setDrawnFeatures([]);\n                draw.current.deleteAll();\n              }}\n            >\n              Clear\n            </Button>\n          </Nav.Item>\n          <Nav.Item as=\"li\" key={3}>\n            <Button\n              variant={\n                currentDrawMode === \"custom_polygon\" ? \"warning\" : \"light\"\n              }\n              onClick={() =>\n                setCurrentDrawMode(\n                  currentDrawMode !== \"custom_polygon\"\n                    ? \"custom_polygon\"\n                    : \"custom_select\"\n                )\n              }\n            >\n              Polygon\n            </Button>\n          </Nav.Item>\n          <div\n            style={{\n              position: \"absolute\",\n              left: \"17px\",\n              top: \"60px\",\n              backgroundColor: \"#f8f9fa\",\n              borderRadius: \"4px\",\n              width: \"150px\",\n              height: \"200px\",\n            }}\n          >\n            <ListGroup>\n              {drawnFeatures.map((feature, id) => (\n                <ListGroup.Item\n                  key={id}\n                  active={selectedFeatureId === feature.id}\n                >\n                  {feature.type} {id}\n                </ListGroup.Item>\n              ))}\n            </ListGroup>\n          </div>\n        </>\n      )}\n    </>\n  );\n}\n\nexport default MlMapDrawTools;\n","/home/tweber/projects/map-components/map-components-maplibre/src/components/index.js",[],"/home/tweber/projects/map-components/map-components-maplibre/src/components/MlMapDrawTools/custom-polygon-mode.js",[],"/home/tweber/projects/map-components/map-components-maplibre/src/components/MlMapDrawTools/custom-select-mode.js",["133"],"import * as CommonSelectors from \"@mapbox/mapbox-gl-draw/src/lib/common_selectors\";\nimport doubleClickZoom from \"@mapbox/mapbox-gl-draw/src/lib/double_click_zoom\";\nimport * as Constants from \"@mapbox/mapbox-gl-draw/src/constants\";\nimport mouseEventPoint from \"@mapbox/mapbox-gl-draw/src/lib/mouse_event_point\";\nimport createSupplementaryPoints from \"@mapbox/mapbox-gl-draw/src/lib/create_supplementary_points\";\nimport StringSet from \"@mapbox/mapbox-gl-draw/src/lib/string_set\";\nimport moveFeatures from \"./lib/move_features\";\nimport drawUtils from \"./lib/utils\";\n\nconst CustomSelectMode = {};\nCustomSelectMode.onSetup = function (opts) {\n  console.log(\"Change mode: custom select\");\n\n  // turn the opts into state.\n  const state = {\n    dragMoveLocation: null,\n    boxSelectStartLocation: null,\n    boxSelectElement: undefined,\n    boxSelecting: false,\n    canBoxSelect: false,\n    dragMoving: false,\n    canDragMove: false,\n    initiallySelectedFeatureIds: opts.featureIds || [],\n  };\n\n  this.setSelected(\n    state.initiallySelectedFeatureIds.filter(\n      (id) => this.getFeature(id) !== undefined\n    )\n  );\n  this.fireActionable();\n\n  this.setActionableState({\n    combineFeatures: true,\n    uncombineFeatures: true,\n    trash: true,\n  });\n\n  return state;\n};\n\nCustomSelectMode.fireUpdate = function () {\n  this.map.fire(Constants.events.UPDATE, {\n    action: Constants.updateActions.MOVE,\n    features: this.getSelected().map((f) => f.toGeoJSON()),\n  });\n};\n\nCustomSelectMode.fireActionable = function () {\n  const selectedFeatures = this.getSelected();\n\n  const multiFeatures = selectedFeatures.filter((feature) =>\n    this.isInstanceOf(\"MultiFeature\", feature)\n  );\n\n  let combineFeatures = false;\n\n  if (selectedFeatures.length > 1) {\n    combineFeatures = true;\n    const featureType = selectedFeatures[0].type.replace(\"Multi\", \"\");\n    selectedFeatures.forEach((feature) => {\n      if (feature.type.replace(\"Multi\", \"\") !== featureType) {\n        combineFeatures = false;\n      }\n    });\n  }\n\n  const uncombineFeatures = multiFeatures.length > 0;\n  const trash = selectedFeatures.length > 0;\n\n  this.setActionableState({\n    combineFeatures,\n    uncombineFeatures,\n    trash,\n  });\n};\n\nCustomSelectMode.getUniqueIds = function (allFeatures) {\n  if (!allFeatures.length) return [];\n  const ids = allFeatures\n    .map((s) => s.properties.id)\n    .filter((id) => id !== undefined)\n    .reduce((memo, id) => {\n      memo.add(id);\n      return memo;\n    }, new StringSet());\n\n  return ids.values();\n};\n\nCustomSelectMode.stopExtendedInteractions = function (state) {\n  if (state.boxSelectElement) {\n    if (state.boxSelectElement.parentNode)\n      state.boxSelectElement.parentNode.removeChild(state.boxSelectElement);\n    state.boxSelectElement = null;\n  }\n\n  this.map.dragPan.enable();\n\n  state.boxSelecting = false;\n  state.canBoxSelect = false;\n  state.dragMoving = false;\n  state.canDragMove = false;\n};\n\nCustomSelectMode.onStop = function () {\n  doubleClickZoom.enable(this);\n};\n\nCustomSelectMode.onMouseMove = function (state) {\n  // On mousemove that is not a drag, stop extended interactions.\n  // This is useful if you drag off the canvas, release the button,\n  // then move the mouse back over the canvas --- we don't allow the\n  // interaction to continue then, but we do let it continue if you held\n  // the mouse button that whole time\n  return this.stopExtendedInteractions(state);\n};\n\nCustomSelectMode.onMouseOut = function (state) {\n  // As soon as you mouse leaves the canvas, update the feature\n  if (state.dragMoving) return this.fireUpdate();\n};\n\nCustomSelectMode.onTap = CustomSelectMode.onClick = function (state, e) {\n  // Click (with or without shift) on no feature\n  if (CommonSelectors.noTarget(e)) return this.clickAnywhere(state, e); // also tap\n  if (CommonSelectors.isOfMetaType(Constants.meta.VERTEX)(e))\n    return this.clickOnVertex(state, e); //tap\n  if (CommonSelectors.isFeature(e)) return this.clickOnFeature(state, e);\n};\n\nCustomSelectMode.clickAnywhere = function (state) {\n  // Clear the re-render selection\n  const wasSelected = this.getSelectedIds();\n  if (wasSelected.length) {\n    this.clearSelectedFeatures();\n    wasSelected.forEach((id) => this.doRender(id));\n  }\n  doubleClickZoom.enable(this);\n  this.stopExtendedInteractions(state);\n};\n\nCustomSelectMode.clickOnVertex = function (state, e) {\n  // Enter direct select mode\n  this.changeMode(\"custom_direct_select\", {\n    featureId: e.featureTarget.properties.parent,\n    coordPath: e.featureTarget.properties.coord_path,\n    startPos: e.lngLat,\n    //    groupMove_vertices: matchingVertices,\n  });\n  this.updateUIClasses({ mouse: Constants.cursors.MOVE });\n};\n\nCustomSelectMode.startOnActiveFeature = function (state, e) {\n  // Stop any already-underway extended interactions\n  this.stopExtendedInteractions(state);\n\n  // Disable map.dragPan immediately so it can't start\n  this.map.dragPan.disable();\n\n  // Re-render it and enable drag move\n  this.doRender(e.featureTarget.properties.id);\n\n  // Set up the state for drag moving\n  state.canDragMove = true;\n  state.dragMoveLocation = e.lngLat;\n};\n\nCustomSelectMode.clickOnFeature = function (state, e) {\n  // Stop everything\n  doubleClickZoom.disable(this);\n  this.stopExtendedInteractions(state);\n\n  const isShiftClick = CommonSelectors.isShiftDown(e);\n  const selectedFeatureIds = this.getSelectedIds();\n  const featureId = e.featureTarget.properties.id;\n  const isFeatureSelected = this.isSelected(featureId);\n\n  // Click (without shift) on any selected feature but a point\n  if (\n    !isShiftClick &&\n    isFeatureSelected &&\n    this.getFeature(featureId).type !== Constants.geojsonTypes.POINT\n  ) {\n    // Enter direct select mode\n    return this.changeMode(\"custom_direct_select\", {\n      featureId,\n    });\n  }\n\n  // Shift-click on a selected feature\n  if (isFeatureSelected && isShiftClick) {\n    // Deselect it\n    this.deselect(featureId);\n    this.updateUIClasses({ mouse: Constants.cursors.POINTER });\n    if (selectedFeatureIds.length === 1) {\n      doubleClickZoom.enable(this);\n    }\n    // Shift-click on an unselected feature\n  } else if (!isFeatureSelected && isShiftClick) {\n    // Add it to the selection\n    this.select(featureId);\n    this.updateUIClasses({ mouse: Constants.cursors.MOVE });\n    // Click (without shift) on an unselected feature\n  } else if (!isFeatureSelected && !isShiftClick) {\n    // Make it the only selected feature\n    selectedFeatureIds.forEach((id) => this.doRender(id));\n    this.setSelected(featureId);\n    this.updateUIClasses({ mouse: Constants.cursors.MOVE });\n  }\n\n  // No matter what, re-render the clicked feature\n  this.doRender(featureId);\n};\n\nCustomSelectMode.onMouseDown = function (state, e) {\n  if (CommonSelectors.isActiveFeature(e))\n    return this.startOnActiveFeature(state, e);\n  if (this.drawConfig.boxSelect && CommonSelectors.isShiftMousedown(e))\n    return this.startBoxSelect(state, e);\n};\n\nCustomSelectMode.startBoxSelect = function (state, e) {\n  this.stopExtendedInteractions(state);\n  this.map.dragPan.disable();\n  // Enable box select\n  state.boxSelectStartLocation = mouseEventPoint(\n    e.originalEvent,\n    this.map.getContainer()\n  );\n  state.canBoxSelect = true;\n};\n\nCustomSelectMode.onTouchStart = function (state, e) {\n  if (CommonSelectors.isActiveFeature(e))\n    return this.startOnActiveFeature(state, e);\n};\n\nCustomSelectMode.onDrag = function (state, e) {\n  if (state.canDragMove) return this.dragMove(state, e);\n  if (this.drawConfig.boxSelect && state.canBoxSelect)\n    return this.whileBoxSelect(state, e);\n};\n\nCustomSelectMode.whileBoxSelect = function (state, e) {\n  state.boxSelecting = true;\n  this.updateUIClasses({ mouse: Constants.cursors.ADD });\n\n  // Create the box node if it doesn't exist\n  if (!state.boxSelectElement) {\n    state.boxSelectElement = document.createElement(\"div\");\n    state.boxSelectElement.classList.add(Constants.classes.BOX_SELECT);\n    this.map.getContainer().appendChild(state.boxSelectElement);\n  }\n\n  // Adjust the box node's width and xy position\n  const current = mouseEventPoint(e.originalEvent, this.map.getContainer());\n  const minX = Math.min(state.boxSelectStartLocation.x, current.x);\n  const maxX = Math.max(state.boxSelectStartLocation.x, current.x);\n  const minY = Math.min(state.boxSelectStartLocation.y, current.y);\n  const maxY = Math.max(state.boxSelectStartLocation.y, current.y);\n  const translateValue = `translate(${minX}px, ${minY}px)`;\n  state.boxSelectElement.style.transform = translateValue;\n  state.boxSelectElement.style.WebkitTransform = translateValue;\n  state.boxSelectElement.style.width = `${maxX - minX}px`;\n  state.boxSelectElement.style.height = `${maxY - minY}px`;\n};\n\nCustomSelectMode.dragMove = function (state, e) {\n  // Dragging when drag move is enabled\n  state.dragMoving = true;\n  e.originalEvent.stopPropagation();\n\n  const delta = {\n    lng: e.lngLat.lng - state.dragMoveLocation.lng,\n    lat: e.lngLat.lat - state.dragMoveLocation.lat,\n  };\n\n  moveFeatures(this.getSelected(), delta);\n\n  state.dragMoveLocation = e.lngLat;\n};\n\nCustomSelectMode.onMouseUp = function (state, e) {\n  // End any extended interactions\n  if (state.dragMoving) {\n    this.fireUpdate();\n  } else if (state.boxSelecting) {\n    const bbox = [\n      state.boxSelectStartLocation,\n      mouseEventPoint(e.originalEvent, this.map.getContainer()),\n    ];\n    const featuresInBox = this.featuresAt(null, bbox, \"click\");\n    const idsToSelect = this.getUniqueIds(featuresInBox).filter(\n      (id) => !this.isSelected(id)\n    );\n\n    if (idsToSelect.length) {\n      this.select(idsToSelect);\n      idsToSelect.forEach((id) => this.doRender(id));\n      this.updateUIClasses({ mouse: Constants.cursors.MOVE });\n    }\n  }\n  this.stopExtendedInteractions(state);\n};\n\nCustomSelectMode.toDisplayFeatures = function (state, geojson, display) {\n  geojson.properties.active = this.isSelected(geojson.properties.id)\n    ? Constants.activeStates.ACTIVE\n    : Constants.activeStates.INACTIVE;\n  display(geojson);\n  this.fireActionable();\n  if (\n    geojson.properties.active !== Constants.activeStates.ACTIVE ||\n    geojson.geometry.type === Constants.geojsonTypes.POINT\n  )\n    return;\n  createSupplementaryPoints(geojson).forEach(display);\n};\n\nCustomSelectMode.onTrash = function () {\n  this.deleteFeature(this.getSelectedIds());\n  this.fireActionable();\n};\n\nCustomSelectMode.onCombineFeatures = function () {\n  const selectedFeatures = this.getSelected();\n\n  if (selectedFeatures.length === 0 || selectedFeatures.length < 2) return;\n\n  const coordinates = [],\n    featuresCombined = [];\n  const featureType = selectedFeatures[0].type.replace(\"Multi\", \"\");\n\n  for (let i = 0; i < selectedFeatures.length; i++) {\n    const feature = selectedFeatures[i];\n\n    if (feature.type.replace(\"Multi\", \"\") !== featureType) {\n      return;\n    }\n    if (feature.type.includes(\"Multi\")) {\n      feature.getCoordinates().forEach((subcoords) => {\n        coordinates.push(subcoords);\n      });\n    } else {\n      coordinates.push(feature.getCoordinates());\n    }\n\n    featuresCombined.push(feature.toGeoJSON());\n  }\n\n  if (featuresCombined.length > 1) {\n    const multiFeature = this.newFeature({\n      type: Constants.geojsonTypes.FEATURE,\n      properties: featuresCombined[0].properties,\n      geometry: {\n        type: `Multi${featureType}`,\n        coordinates,\n      },\n    });\n\n    this.addFeature(multiFeature);\n    this.deleteFeature(this.getSelectedIds(), { silent: true });\n    this.setSelected([multiFeature.id]);\n\n    this.map.fire(Constants.events.COMBINE_FEATURES, {\n      createdFeatures: [multiFeature.toGeoJSON()],\n      deletedFeatures: featuresCombined,\n    });\n  }\n  this.fireActionable();\n};\n\nCustomSelectMode.onUncombineFeatures = function () {\n  const selectedFeatures = this.getSelected();\n  if (selectedFeatures.length === 0) return;\n\n  const createdFeatures = [];\n  const featuresUncombined = [];\n\n  for (let i = 0; i < selectedFeatures.length; i++) {\n    const feature = selectedFeatures[i];\n\n    if (this.isInstanceOf(\"MultiFeature\", feature)) {\n      feature.getFeatures().forEach((subFeature) => {\n        this.addFeature(subFeature);\n        subFeature.properties = feature.properties;\n        createdFeatures.push(subFeature.toGeoJSON());\n        this.select([subFeature.id]);\n      });\n      this.deleteFeature(feature.id, { silent: true });\n      featuresUncombined.push(feature.toGeoJSON());\n    }\n  }\n\n  if (createdFeatures.length > 1) {\n    this.map.fire(Constants.events.UNCOMBINE_FEATURES, {\n      createdFeatures,\n      deletedFeatures: featuresUncombined,\n    });\n  }\n  this.fireActionable();\n};\n\nexport default CustomSelectMode;\n",{"ruleId":"134","severity":1,"message":"135","line":3,"column":23,"nodeType":"136","messageId":"137","endLine":3,"endColumn":38},{"ruleId":"138","severity":1,"message":"139","line":7,"column":1,"nodeType":"140","endLine":17,"endColumn":3},{"ruleId":"141","replacedBy":"142"},{"ruleId":"143","replacedBy":"144"},{"ruleId":"138","severity":1,"message":"139","line":8,"column":1,"nodeType":"140","endLine":23,"endColumn":3},{"ruleId":"141","replacedBy":"145"},{"ruleId":"143","replacedBy":"146"},{"ruleId":"138","severity":1,"message":"139","line":12,"column":1,"nodeType":"140","endLine":16,"endColumn":3},{"ruleId":"141","replacedBy":"147"},{"ruleId":"143","replacedBy":"148"},{"ruleId":"149","severity":1,"message":"150","line":88,"column":6,"nodeType":"151","endLine":88,"endColumn":48,"suggestions":"152"},{"ruleId":"149","severity":1,"message":"153","line":117,"column":6,"nodeType":"151","endLine":117,"endColumn":22,"suggestions":"154"},{"ruleId":"134","severity":1,"message":"155","line":8,"column":8,"nodeType":"136","messageId":"137","endLine":8,"endColumn":17},{"ruleId":"138","severity":1,"message":"139","line":7,"column":1,"nodeType":"140","endLine":17,"endColumn":3},{"ruleId":"141","replacedBy":"156"},{"ruleId":"143","replacedBy":"157"},{"ruleId":"138","severity":1,"message":"139","line":7,"column":1,"nodeType":"140","endLine":17,"endColumn":3},{"ruleId":"138","severity":1,"message":"139","line":8,"column":1,"nodeType":"140","endLine":13,"endColumn":3},{"ruleId":"134","severity":1,"message":"158","line":46,"column":15,"nodeType":"136","messageId":"137","endLine":46,"endColumn":18},{"ruleId":"159","severity":1,"message":"160","line":47,"column":26,"nodeType":"161","messageId":"162","endLine":47,"endColumn":28},{"ruleId":"149","severity":1,"message":"163","line":44,"column":6,"nodeType":"151","endLine":44,"endColumn":8,"suggestions":"164"},{"ruleId":"149","severity":1,"message":"150","line":88,"column":6,"nodeType":"151","endLine":88,"endColumn":48,"suggestions":"165"},{"ruleId":"149","severity":1,"message":"153","line":117,"column":6,"nodeType":"151","endLine":117,"endColumn":22,"suggestions":"166"},{"ruleId":"134","severity":1,"message":"155","line":8,"column":8,"nodeType":"136","messageId":"137","endLine":8,"endColumn":17},"no-unused-vars","'CreatePdfButton' is defined but never used.","Identifier","unusedVar","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","no-native-reassign",["167"],"no-negated-in-lhs",["168"],["167"],["168"],["167"],["168"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'storedMapFeatures'. Either include it or remove the dependency array.","ArrayExpression",["169"],"React Hook useEffect has missing dependencies: 'currentDrawMode' and 'drawnFeatures'. Either include them or remove the dependency array.",["170"],"'drawUtils' is defined but never used.",["167"],["168"],"'key' is assigned a value but never used.","array-callback-return","Array.prototype.some() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","React Hook useEffect has missing dependencies: 'mapContext' and 'mapOptions'. Either include them or remove the dependency array.",["171"],["172"],["173"],"no-global-assign","no-unsafe-negation",{"desc":"174","fix":"175"},{"desc":"176","fix":"177"},{"desc":"178","fix":"179"},{"desc":"174","fix":"180"},{"desc":"176","fix":"181"},"Update the dependencies array to be: [mapContext.map, drawnFeatures, firstLoad, storedMapFeatures]",{"range":"182","text":"183"},"Update the dependencies array to be: [currentDrawMode, drawnFeatures, mouseUpTrigger]",{"range":"184","text":"185"},"Update the dependencies array to be: [mapContext, mapOptions]",{"range":"186","text":"187"},{"range":"188","text":"183"},{"range":"189","text":"185"},[2919,2961],"[mapContext.map, drawnFeatures, firstLoad, storedMapFeatures]",[3815,3831],"[currentDrawMode, drawnFeatures, mouseUpTrigger]",[1559,1561],"[mapContext, mapOptions]",[2923,2965],[3819,3835]]